android.content.pm.IPackageDataObserver -> android.a.a.a:
    void onRemoveCompleted(java.lang.String,boolean) -> a
android.content.pm.IPackageDataObserver$Stub -> android.a.a.b:
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.content.pm.IPackageStatsObserver -> android.a.a.c:
    void onGetStatsCompleted(android.content.pm.PackageStats,boolean) -> a
android.content.pm.IPackageStatsObserver$Stub -> android.a.a.d:
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String) -> b
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    android.support.v4.util.SimpleArrayMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    boolean isSupportFragmentClass(android.content.Context,java.lang.String) -> b
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> e
    void onResume() -> f
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> g
    void onStop() -> h
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> i
    void onDestroy() -> j
    void initState() -> k
    void onDetach() -> l
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> m
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> n
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> o
    void performResume() -> p
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> q
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> r
    void performStop() -> s
    void performReallyStop() -> t
    void performDestroyView() -> u
    void performDestroy() -> v
android.support.v4.app.Fragment$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.h:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    android.support.v4.util.SimpleArrayMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    boolean onPrepareOptionsPanel(android.view.View,android.view.Menu) -> a
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentManager getSupportFragmentManager() -> e
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.i:
    android.support.v4.app.FragmentActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$2 -> android.support.v4.app.j:
    android.support.v4.app.FragmentActivity this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.k:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.l:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    android.support.v4.util.SimpleArrayMap children -> c
    java.util.ArrayList fragments -> d
    android.support.v4.util.SimpleArrayMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.m:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.n:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.o:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.p:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.r:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.s:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.u:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.v:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.w:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.x:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.y:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.z:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.aa:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.ab:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.ac:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ad:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    boolean mProcessingChange -> g
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.ArrayMap -> android.support.v4.c.a:
    android.support.v4.util.MapCollections mCollections -> a
    android.support.v4.util.MapCollections getCollection() -> b
    void putAll(java.util.Map) -> putAll
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
android.support.v4.util.ArrayMap$1 -> android.support.v4.c.b:
    android.support.v4.util.ArrayMap this$0 -> a
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.ContainerHelpers -> android.support.v4.c.c:
    int[] EMPTY_INTS -> a
    long[] EMPTY_LONGS -> b
    java.lang.Object[] EMPTY_OBJECTS -> c
    int idealIntArraySize(int) -> a
    int idealByteArraySize(int) -> b
    boolean equal(java.lang.Object,java.lang.Object) -> a
    int binarySearch(int[],int,int) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.d:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.e:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.MapCollections -> android.support.v4.c.f:
    android.support.v4.util.MapCollections$EntrySet mEntrySet -> b
    android.support.v4.util.MapCollections$KeySet mKeySet -> c
    android.support.v4.util.MapCollections$ValuesCollection mValues -> d
    boolean containsAllHelper(java.util.Map,java.util.Collection) -> a
    boolean removeAllHelper(java.util.Map,java.util.Collection) -> b
    boolean retainAllHelper(java.util.Map,java.util.Collection) -> c
    java.lang.Object[] toArrayHelper(int) -> b
    java.lang.Object[] toArrayHelper(java.lang.Object[],int) -> a
    boolean equalsSetHelper(java.util.Set,java.lang.Object) -> a
    java.util.Set getEntrySet() -> d
    java.util.Set getKeySet() -> e
    java.util.Collection getValues() -> f
    int colGetSize() -> a
    java.lang.Object colGetEntry(int,int) -> a
    int colIndexOfKey(java.lang.Object) -> a
    int colIndexOfValue(java.lang.Object) -> b
    java.util.Map colGetMap() -> b
    void colPut(java.lang.Object,java.lang.Object) -> a
    java.lang.Object colSetValue(int,java.lang.Object) -> a
    void colRemoveAt(int) -> a
    void colClear() -> c
android.support.v4.util.MapCollections$ArrayIterator -> android.support.v4.c.g:
    int mOffset -> a
    int mSize -> b
    int mIndex -> c
    boolean mCanRemove -> d
    android.support.v4.util.MapCollections this$0 -> e
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
android.support.v4.util.MapCollections$EntrySet -> android.support.v4.c.h:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.util.Map$Entry) -> a
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean add(java.lang.Object) -> add
android.support.v4.util.MapCollections$KeySet -> android.support.v4.c.i:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
android.support.v4.util.MapCollections$MapIterator -> android.support.v4.c.j:
    int mEnd -> a
    int mIndex -> b
    boolean mEntryValid -> c
    android.support.v4.util.MapCollections this$0 -> d
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> a
    void remove() -> remove
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object next() -> next
android.support.v4.util.MapCollections$ValuesCollection -> android.support.v4.c.k:
    android.support.v4.util.MapCollections this$0 -> a
    boolean add(java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean containsAll(java.util.Collection) -> containsAll
    boolean isEmpty() -> isEmpty
    java.util.Iterator iterator() -> iterator
    boolean remove(java.lang.Object) -> remove
    boolean removeAll(java.util.Collection) -> removeAll
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
android.support.v4.util.SimpleArrayMap -> android.support.v4.c.l:
    java.lang.Object[] mBaseCache -> b
    int mBaseCacheSize -> c
    java.lang.Object[] mTwiceBaseCache -> d
    int mTwiceBaseCacheSize -> e
    int[] mHashes -> f
    java.lang.Object[] mArray -> g
    int mSize -> h
    int indexOf(java.lang.Object,int) -> a
    int indexOfNull() -> a
    void allocArrays(int) -> e
    void freeArrays(int[],java.lang.Object[],int) -> a
    void clear() -> clear
    void ensureCapacity(int) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    int indexOfValue(java.lang.Object) -> a
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object keyAt(int) -> b
    java.lang.Object valueAt(int) -> c
    java.lang.Object setValueAt(int,java.lang.Object) -> a
    boolean isEmpty() -> isEmpty
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object removeAt(int) -> d
    int size() -> size
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.m:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    android.support.v4.util.SparseArrayCompat clone() -> a
    void gc() -> c
    int size() -> b
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> clear
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
android.support.v4.view.AccessibilityDelegateCompat -> android.support.v4.view.a:
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl IMPL -> b
    java.lang.Object DEFAULT_DELEGATE -> c
    java.lang.Object mBridge -> a
    java.lang.Object getBridge() -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl -> android.support.v4.view.b:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl -> android.support.v4.view.c:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl -> android.support.v4.view.d:
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl -> android.support.v4.view.e:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
android.support.v4.view.AccessibilityDelegateCompatIcs -> android.support.v4.view.f:
    java.lang.Object newAccessibilityDelegateDefaultImpl() -> a
android.support.v4.view.GravityCompat -> android.support.v4.view.g:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.h:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.i:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.j:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.k:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.l:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.m:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.n:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.o:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.p:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.q:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.r:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.s:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.t:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.u:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.v:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.w:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.x:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.y:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.z:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.aa:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.ab:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.ac:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.ad:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.ae:
    java.util.WeakHashMap mViewPropertyAnimatorCompatMap -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$EclairMr1ViewCompatImpl -> android.support.v4.view.af:
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.ag:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.ah:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ai:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.aj:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setImportantForAccessibility(android.view.View,int) -> b
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.ak:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
android.support.v4.view.ViewCompat$KitKatViewCompatImpl -> android.support.v4.view.al:
    void setImportantForAccessibility(android.view.View,int) -> b
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.am:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> c
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> d
    boolean isOpaque(android.view.View) -> e
android.support.v4.view.ViewCompatEclairMr1 -> android.support.v4.view.an:
    boolean isOpaque(android.view.View) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.ao:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.ap:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.aq:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,java.lang.Object) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.ar:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setImportantForAccessibility(android.view.View,int) -> a
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.as:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> Z
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> aa
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ab
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ac
    int mDrawingOrder -> ad
    java.util.ArrayList mDrawingOrderedChildren -> ae
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> af
    java.lang.Runnable mEndScrollRunnable -> ag
    int mScrollState -> ah
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void sortChildDrawingOrder() -> g
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestParentDisallowInterceptTouchEvent(boolean) -> c
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> h
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> i
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScrollHorizontally(int) -> canScrollHorizontally
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$400() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.at:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.au:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.av:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.aw:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ax:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.ay:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.az:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.ba:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.bb:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.bc:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.bd:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> a
    android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate mChildAccessibilityDelegate -> b
    int mMinDrawerMargin -> c
    int mScrimColor -> d
    float mScrimOpacity -> e
    android.graphics.Paint mScrimPaint -> f
    android.support.v4.widget.ViewDragHelper mLeftDragger -> g
    android.support.v4.widget.ViewDragHelper mRightDragger -> h
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> i
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> j
    int mDrawerState -> k
    boolean mInLayout -> l
    boolean mFirstLayout -> m
    int mLockModeLeft -> n
    int mLockModeRight -> o
    boolean mDisallowInterceptRequested -> p
    boolean mChildrenCanceledTouch -> q
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> r
    float mInitialMotionX -> s
    float mInitialMotionY -> t
    android.graphics.drawable.Drawable mShadowLeft -> u
    android.graphics.drawable.Drawable mShadowRight -> v
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> a
    int getDrawerLockMode(android.view.View) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewAbsoluteGravity(android.view.View) -> e
    boolean checkDrawerViewAbsoluteGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> a
    java.lang.String gravityToString(int) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> k
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void closeDrawer(android.view.View) -> i
    boolean isDrawerVisible(android.view.View) -> j
    boolean hasPeekingDrawer() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> e
    android.view.View findVisibleDrawer() -> f
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    int[] access$100() -> c
android.support.v4.widget.DrawerLayout$ChildAccessibilityDelegate -> android.support.v4.widget.a:
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.b:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.c:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.d:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.e:
    int mAbsGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.f:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.g:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.h:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.i:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.j:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.k:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl mImpl -> b
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalX() -> d
    int getFinalY() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.l:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawableLeft -> d
    android.graphics.drawable.Drawable mShadowDrawableRight -> e
    int mOverhangSize -> f
    boolean mCanSlide -> g
    android.view.View mSlideableView -> h
    float mSlideOffset -> i
    float mParallaxOffset -> j
    int mSlideRange -> k
    boolean mIsUnableToDrag -> l
    int mParallaxBy -> m
    float mInitialMotionX -> n
    float mInitialMotionY -> o
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> p
    android.support.v4.widget.ViewDragHelper mDragHelper -> q
    boolean mPreservedOpenState -> r
    boolean mFirstLayout -> s
    android.graphics.Rect mTmpRect -> t
    java.util.ArrayList mPostedRunnables -> u
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean viewIsOpaque(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowDrawableLeft(android.graphics.drawable.Drawable) -> setShadowDrawableLeft
    void setShadowDrawableRight(android.graphics.drawable.Drawable) -> setShadowDrawableRight
    void setShadowResource(int) -> setShadowResource
    void setShadowResourceLeft(int) -> setShadowResourceLeft
    void setShadowResourceRight(int) -> setShadowResourceRight
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    boolean isLayoutRtlSupport() -> f
    void access$1000(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1100(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.m:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.n:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.o:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.p:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.q:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.r:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.s:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.t:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.u:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.v:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    int getViewDragState() -> a
    void setEdgeTrackingEnabled(int) -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> cancel
    void abort() -> e
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> a
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> f
    void clearMotionHistory(int) -> e
    void ensureMotionHistorySizeForId(int) -> f
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> b
    void setDragState(int) -> c
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> d
    boolean checkTouchSlop(int,int) -> b
    void releaseViewForPointerUp() -> g
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> c
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> d
    int getEdgesTouched(int,int) -> e
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.w:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.x:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
com.android.internal.telephony.ITelephony -> com.a.a.a.a:
    boolean endCall() -> a
com.lidroid.xutils.HttpUtils -> com.b.a.a:
    com.lidroid.xutils.http.HttpCache sHttpCache -> a
    org.apache.http.impl.client.DefaultHttpClient httpClient -> b
    org.apache.http.protocol.HttpContext httpContext -> c
    com.lidroid.xutils.http.callback.HttpRedirectHandler httpRedirectHandler -> d
    java.lang.String responseTextCharset -> e
    long currentRequestExpiry -> f
    com.lidroid.xutils.task.PriorityExecutor EXECUTOR -> g
    com.lidroid.xutils.http.HttpHandler download(java.lang.String,java.lang.String,com.lidroid.xutils.http.callback.RequestCallBack) -> a
    com.lidroid.xutils.http.HttpHandler download(com.lidroid.xutils.http.client.HttpRequest$HttpMethod,java.lang.String,java.lang.String,com.lidroid.xutils.http.RequestParams,boolean,boolean,com.lidroid.xutils.http.callback.RequestCallBack) -> a
com.lidroid.xutils.HttpUtils$1 -> com.b.a.b:
    com.lidroid.xutils.HttpUtils this$0 -> a
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
com.lidroid.xutils.HttpUtils$2 -> com.b.a.c:
    com.lidroid.xutils.HttpUtils this$0 -> a
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
com.lidroid.xutils.ViewUtils -> com.b.a.d:
    void inject(android.app.Activity) -> a
    void injectObject(java.lang.Object,com.lidroid.xutils.view.ViewFinder) -> a
com.lidroid.xutils.cache.KeyExpiryMap -> com.b.a.a.a:
    java.lang.Long get(java.lang.Object) -> a
    java.lang.Long put(java.lang.Object,java.lang.Long) -> a
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Long remove(java.lang.Object) -> b
    void clear() -> clear
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
com.lidroid.xutils.cache.LruMemoryCache -> com.b.a.a.b:
    java.util.LinkedHashMap map -> a
    int size -> b
    int maxSize -> c
    int putCount -> d
    int createCount -> e
    int evictionCount -> f
    int hitCount -> g
    int missCount -> h
    com.lidroid.xutils.cache.KeyExpiryMap keyExpiryMap -> i
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object,long) -> a
    void trimToSize(int) -> a
    java.lang.Object remove(java.lang.Object) -> b
    void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.Object create(java.lang.Object) -> c
    int safeSizeOf(java.lang.Object,java.lang.Object) -> b
    int sizeOf(java.lang.Object,java.lang.Object) -> a
    void evictAll() -> a
    java.lang.String toString() -> toString
com.lidroid.xutils.exception.BaseException -> com.b.a.b.a:
com.lidroid.xutils.exception.HttpException -> com.b.a.b.b:
    int exceptionCode -> a
com.lidroid.xutils.http.HttpCache -> com.b.a.c.a:
    com.lidroid.xutils.cache.LruMemoryCache mMemoryCache -> a
    int cacheSize -> b
    long defaultExpiryTime -> c
    java.util.concurrent.ConcurrentHashMap httpMethod_enabled_map -> d
    long getDefaultExpiryTime() -> a
    void put(java.lang.String,java.lang.String,long) -> a
    java.lang.String get(java.lang.String) -> a
    void clear() -> clear
    boolean isEnabled(java.lang.String) -> b
com.lidroid.xutils.http.HttpCache$1 -> com.b.a.c.b:
    com.lidroid.xutils.http.HttpCache this$0 -> a
    int sizeOf(java.lang.String,java.lang.String) -> a
    int sizeOf(java.lang.Object,java.lang.Object) -> a
com.lidroid.xutils.http.HttpHandler -> com.b.a.c.c:
    org.apache.http.impl.client.AbstractHttpClient client -> b
    org.apache.http.protocol.HttpContext context -> c
    com.lidroid.xutils.http.callback.HttpRedirectHandler httpRedirectHandler -> d
    java.lang.String requestUrl -> e
    java.lang.String requestMethod -> f
    org.apache.http.client.methods.HttpRequestBase request -> g
    boolean isUploading -> h
    com.lidroid.xutils.http.callback.RequestCallBack callback -> i
    int retriedCount -> j
    java.lang.String fileSavePath -> k
    boolean isDownloadingFile -> l
    boolean autoResume -> m
    boolean autoRename -> n
    java.lang.String charset -> o
    com.lidroid.xutils.http.HttpHandler$State state -> p
    long expiry -> q
    long lastUpdateTime -> r
    com.lidroid.xutils.http.HttpHandler$NotUseApacheRedirectHandler notUseApacheRedirectHandler -> s
    void setHttpRedirectHandler(com.lidroid.xutils.http.callback.HttpRedirectHandler) -> a
    void setExpiry(long) -> a
    com.lidroid.xutils.http.ResponseInfo sendRequest(org.apache.http.client.methods.HttpRequestBase) -> a
    java.lang.Void doInBackground(java.lang.Object[]) -> a
    void onProgressUpdate(java.lang.Object[]) -> b
    com.lidroid.xutils.http.ResponseInfo handleResponse(org.apache.http.HttpResponse) -> a
    void cancel() -> cancel
    boolean updateProgress(long,long,boolean) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> c
com.lidroid.xutils.http.HttpHandler$NotUseApacheRedirectHandler -> com.b.a.c.d:
    boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> isRedirectRequested
    java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> getLocationURI
com.lidroid.xutils.http.HttpHandler$State -> com.b.a.c.e:
    com.lidroid.xutils.http.HttpHandler$State WAITING -> a
    com.lidroid.xutils.http.HttpHandler$State STARTED -> b
    com.lidroid.xutils.http.HttpHandler$State LOADING -> c
    com.lidroid.xutils.http.HttpHandler$State FAILURE -> d
    com.lidroid.xutils.http.HttpHandler$State CANCELLED -> e
    com.lidroid.xutils.http.HttpHandler$State SUCCESS -> f
    int value -> g
    com.lidroid.xutils.http.HttpHandler$State[] ENUM$VALUES -> h
    com.lidroid.xutils.http.HttpHandler$State[] values() -> values
    com.lidroid.xutils.http.HttpHandler$State valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.http.RequestParams -> com.b.a.c.f:
    java.lang.String charset -> a
    java.util.List headers -> b
    java.util.List queryStringParams -> c
    org.apache.http.HttpEntity bodyEntity -> d
    java.util.List bodyParams -> e
    java.util.HashMap fileParams -> f
    com.lidroid.xutils.task.Priority priority -> g
    com.lidroid.xutils.task.Priority getPriority() -> a
    java.lang.String getCharset() -> b
    org.apache.http.HttpEntity getEntity() -> c
    java.util.List getQueryStringParams() -> d
    java.util.List getHeaders() -> e
com.lidroid.xutils.http.RequestParams$HeaderItem -> com.b.a.c.g:
    boolean overwrite -> a
    org.apache.http.Header header -> b
com.lidroid.xutils.http.ResponseInfo -> com.b.a.c.h:
    org.apache.http.HttpResponse response -> j
    java.lang.Object result -> a
    boolean resultFormCache -> b
    java.util.Locale locale -> c
    int statusCode -> d
    org.apache.http.ProtocolVersion protocolVersion -> e
    java.lang.String reasonPhrase -> f
    long contentLength -> g
    org.apache.http.Header contentType -> h
    org.apache.http.Header contentEncoding -> i
com.lidroid.xutils.http.callback.DefaultHttpRedirectHandler -> com.b.a.c.a.a:
    org.apache.http.client.methods.HttpRequestBase getDirectRequest(org.apache.http.HttpResponse) -> a
com.lidroid.xutils.http.callback.FileDownloadHandler -> com.b.a.c.a.b:
    java.io.File handleEntity(org.apache.http.HttpEntity,com.lidroid.xutils.http.callback.RequestCallBackHandler,java.lang.String,boolean,java.lang.String) -> a
com.lidroid.xutils.http.callback.HttpRedirectHandler -> com.b.a.c.a.c:
    org.apache.http.client.methods.HttpRequestBase getDirectRequest(org.apache.http.HttpResponse) -> a
com.lidroid.xutils.http.callback.RequestCallBack -> com.b.a.c.a.d:
    java.lang.String requestUrl -> a
    int rate -> b
    int getRate() -> a
    void setRequestUrl(java.lang.String) -> a
    void onStart() -> b
    void onCancelled() -> c
    void onLoading(long,long,boolean) -> a
    void onSuccess(com.lidroid.xutils.http.ResponseInfo) -> a
    void onFailure(com.lidroid.xutils.exception.HttpException,java.lang.String) -> a
com.lidroid.xutils.http.callback.RequestCallBackHandler -> com.b.a.c.a.e:
    boolean updateProgress(long,long,boolean) -> a
com.lidroid.xutils.http.callback.StringDownloadHandler -> com.b.a.c.a.f:
    java.lang.String handleEntity(org.apache.http.HttpEntity,com.lidroid.xutils.http.callback.RequestCallBackHandler,java.lang.String) -> a
com.lidroid.xutils.http.client.DefaultSSLSocketFactory -> com.b.a.c.b.a:
    javax.net.ssl.SSLContext sslContext -> a
    java.security.KeyStore trustStore -> b
    com.lidroid.xutils.http.client.DefaultSSLSocketFactory instance -> c
    com.lidroid.xutils.http.client.DefaultSSLSocketFactory getSocketFactory() -> a
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    java.net.Socket createSocket() -> createSocket
com.lidroid.xutils.http.client.DefaultSSLSocketFactory$1 -> com.b.a.c.b.b:
    com.lidroid.xutils.http.client.DefaultSSLSocketFactory this$0 -> a
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
com.lidroid.xutils.http.client.HttpRequest -> com.b.a.c.b.c:
    org.apache.http.HttpEntity entity -> a
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod method -> b
    com.lidroid.xutils.http.client.util.URIBuilder uriBuilder -> c
    java.nio.charset.Charset uriCharset -> d
    com.lidroid.xutils.http.client.HttpRequest addQueryStringParams(java.util.List) -> a
    void setRequestParams(com.lidroid.xutils.http.RequestParams,com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
    java.net.URI getURI() -> getURI
    void setURI(java.net.URI) -> setURI
    void setURI(java.lang.String) -> a
    java.lang.String getMethod() -> getMethod
    org.apache.http.HttpEntity getEntity() -> getEntity
    void setEntity(org.apache.http.HttpEntity) -> setEntity
    boolean expectContinue() -> expectContinue
    java.lang.Object clone() -> clone
com.lidroid.xutils.http.client.HttpRequest$HttpMethod -> com.b.a.c.b.d:
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod GET -> a
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod POST -> b
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod PUT -> c
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod HEAD -> d
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod MOVE -> e
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod COPY -> f
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod DELETE -> g
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod OPTIONS -> h
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod TRACE -> i
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod CONNECT -> j
    java.lang.String value -> k
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod[] ENUM$VALUES -> l
    java.lang.String toString() -> toString
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod[] values() -> values
    com.lidroid.xutils.http.client.HttpRequest$HttpMethod valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.http.client.RetryHandler -> com.b.a.c.b.e:
    java.util.HashSet exceptionWhiteList -> a
    java.util.HashSet exceptionBlackList -> b
    int maxRetries -> c
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
com.lidroid.xutils.http.client.entity.BodyParamsEntity -> com.b.a.c.b.a.a:
    byte[] content -> a
    boolean dirty -> b
    java.lang.String charset -> c
    java.util.List params -> d
    void refreshContent() -> a
    boolean isRepeatable() -> isRepeatable
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    boolean isStreaming() -> isStreaming
    java.lang.Object clone() -> clone
com.lidroid.xutils.http.client.entity.DecompressingEntity -> com.b.a.c.b.a.b:
    java.io.InputStream content -> a
    long uncompressedLength -> b
    long uploadedSize -> c
    com.lidroid.xutils.http.callback.RequestCallBackHandler callBackHandler -> d
    java.io.InputStream decorate(java.io.InputStream) -> a
    java.io.InputStream getDecompressingStream() -> a
    java.io.InputStream getContent() -> getContent
    long getContentLength() -> getContentLength
    void writeTo(java.io.OutputStream) -> writeTo
    void setCallBackHandler(com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
com.lidroid.xutils.http.client.entity.GZipDecompressingEntity -> com.b.a.c.b.a.c:
    java.io.InputStream decorate(java.io.InputStream) -> a
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    long getContentLength() -> getContentLength
    java.io.InputStream getContent() -> getContent
    void setCallBackHandler(com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
    void writeTo(java.io.OutputStream) -> writeTo
com.lidroid.xutils.http.client.entity.UploadEntity -> com.b.a.c.b.a.d:
    void setCallBackHandler(com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
com.lidroid.xutils.http.client.multipart.FormBodyPart -> com.b.a.c.b.b.a:
    java.lang.String name -> a
    com.lidroid.xutils.http.client.multipart.MinimalFieldHeader header -> b
    com.lidroid.xutils.http.client.multipart.content.ContentBody body -> c
    java.lang.String getName() -> a
    com.lidroid.xutils.http.client.multipart.content.ContentBody getBody() -> b
    com.lidroid.xutils.http.client.multipart.MinimalFieldHeader getHeader() -> c
    void addField(java.lang.String,java.lang.String) -> a
    void generateContentDisposition(com.lidroid.xutils.http.client.multipart.content.ContentBody) -> a
    void generateContentType(com.lidroid.xutils.http.client.multipart.content.ContentBody) -> b
    void generateTransferEncoding(com.lidroid.xutils.http.client.multipart.content.ContentBody) -> c
com.lidroid.xutils.http.client.multipart.HttpMultipart -> com.b.a.c.b.b.b:
    org.apache.http.util.ByteArrayBuffer FIELD_SEP -> a
    org.apache.http.util.ByteArrayBuffer CR_LF -> b
    org.apache.http.util.ByteArrayBuffer TWO_DASHES -> c
    java.lang.String subType -> d
    java.nio.charset.Charset charset -> e
    java.lang.String boundary -> f
    java.util.List parts -> g
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode mode -> h
    int[] $SWITCH_TABLE$com$lidroid$xutils$http$client$multipart$HttpMultipartMode -> i
    org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String) -> a
    void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.io.OutputStream) -> a
    void writeField(com.lidroid.xutils.http.client.multipart.MinimalField,java.io.OutputStream) -> a
    void writeField(com.lidroid.xutils.http.client.multipart.MinimalField,java.nio.charset.Charset,java.io.OutputStream) -> a
    java.util.List getBodyParts() -> a
    void addBodyPart(com.lidroid.xutils.http.client.multipart.FormBodyPart) -> a
    java.lang.String getBoundary() -> b
    void doWriteTo(com.lidroid.xutils.http.client.multipart.HttpMultipartMode,java.io.OutputStream,boolean) -> a
    void doWriteTo(com.lidroid.xutils.http.client.multipart.HttpMultipartMode,java.io.OutputStream,com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo,boolean) -> a
    void writeTo(java.io.OutputStream,com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo) -> a
    long getTotalLength() -> c
    int[] $SWITCH_TABLE$com$lidroid$xutils$http$client$multipart$HttpMultipartMode() -> d
com.lidroid.xutils.http.client.multipart.HttpMultipartMode -> com.b.a.c.b.b.c:
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode STRICT -> a
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode BROWSER_COMPATIBLE -> b
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode[] ENUM$VALUES -> c
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode[] values() -> values
    com.lidroid.xutils.http.client.multipart.HttpMultipartMode valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.http.client.multipart.MIME -> com.b.a.c.b.b.d:
    java.nio.charset.Charset DEFAULT_CHARSET -> a
com.lidroid.xutils.http.client.multipart.MinimalField -> com.b.a.c.b.b.e:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String getName() -> a
    java.lang.String getBody() -> b
    java.lang.String toString() -> toString
com.lidroid.xutils.http.client.multipart.MinimalFieldHeader -> com.b.a.c.b.b.f:
    java.util.List fields -> a
    java.util.Map fieldMap -> b
    void addField(com.lidroid.xutils.http.client.multipart.MinimalField) -> a
    com.lidroid.xutils.http.client.multipart.MinimalField getField(java.lang.String) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
com.lidroid.xutils.http.client.multipart.MultipartEntity -> com.b.a.c.b.b.g:
    com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo callBackInfo -> a
    char[] MULTIPART_CHARS -> b
    com.lidroid.xutils.http.client.multipart.HttpMultipart multipart -> c
    org.apache.http.Header contentType -> d
    long length -> e
    boolean dirty -> f
    java.lang.String boundary -> g
    java.nio.charset.Charset charset -> h
    java.lang.String multipartSubtype -> i
    void setCallBackHandler(com.lidroid.xutils.http.callback.RequestCallBackHandler) -> a
    java.lang.String generateContentType(java.lang.String,java.nio.charset.Charset) -> a
    java.lang.String generateBoundary() -> a
    void addPart(com.lidroid.xutils.http.client.multipart.FormBodyPart) -> a
    void addPart(java.lang.String,com.lidroid.xutils.http.client.multipart.content.ContentBody) -> a
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    boolean isStreaming() -> isStreaming
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo -> com.b.a.c.b.b.h:
    com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo DEFAULT -> a
    com.lidroid.xutils.http.callback.RequestCallBackHandler callBackHandler -> b
    long totalLength -> c
    long pos -> d
    boolean doCallBack(boolean) -> a
com.lidroid.xutils.http.client.multipart.content.AbstractContentBody -> com.b.a.c.b.b.a.a:
    java.lang.String mimeType -> b
    java.lang.String mediaType -> c
    java.lang.String subType -> d
    com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo callBackInfo -> a
    java.lang.String getMimeType() -> a
    void setCallBackInfo(com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo) -> a
com.lidroid.xutils.http.client.multipart.content.ContentBody -> com.b.a.c.b.b.a.b:
    java.lang.String getFilename() -> b
    void writeTo(java.io.OutputStream) -> a
    void setCallBackInfo(com.lidroid.xutils.http.client.multipart.MultipartEntity$CallBackInfo) -> a
com.lidroid.xutils.http.client.multipart.content.ContentDescriptor -> com.b.a.c.b.b.a.c:
    java.lang.String getMimeType() -> a
    java.lang.String getCharset() -> c
    java.lang.String getTransferEncoding() -> d
    long getContentLength() -> e
com.lidroid.xutils.http.client.multipart.content.StringBody -> com.b.a.c.b.b.a.d:
    byte[] content -> b
    java.nio.charset.Charset charset -> c
    void writeTo(java.io.OutputStream) -> a
    java.lang.String getTransferEncoding() -> d
    java.lang.String getCharset() -> c
    long getContentLength() -> e
    java.lang.String getFilename() -> b
com.lidroid.xutils.http.client.util.URIBuilder -> com.b.a.c.b.c.a:
    java.lang.String scheme -> a
    java.lang.String encodedSchemeSpecificPart -> b
    java.lang.String encodedAuthority -> c
    java.lang.String userInfo -> d
    java.lang.String encodedUserInfo -> e
    java.lang.String host -> f
    int port -> g
    java.lang.String path -> h
    java.lang.String encodedPath -> i
    java.lang.String encodedQuery -> j
    java.util.List queryParams -> k
    java.lang.String fragment -> l
    java.lang.String encodedFragment -> m
    void digestURI(java.net.URI) -> a
    java.util.List parseQuery(java.lang.String) -> a
    java.net.URI build(java.nio.charset.Charset) -> a
    java.lang.String buildString(java.nio.charset.Charset) -> b
    java.lang.String encodeUserInfo(java.lang.String,java.nio.charset.Charset) -> a
    java.lang.String encodePath(java.lang.String,java.nio.charset.Charset) -> b
    java.lang.String encodeQuery(java.util.List,java.nio.charset.Charset) -> a
    java.lang.String encodeFragment(java.lang.String,java.nio.charset.Charset) -> c
    com.lidroid.xutils.http.client.util.URIBuilder addParameter(java.lang.String,java.lang.String) -> a
    java.lang.String normalizePath(java.lang.String) -> b
com.lidroid.xutils.http.client.util.URLEncodedUtils -> com.b.a.c.b.c.b:
    char[] DELIM -> a
    java.util.BitSet UNRESERVED -> b
    java.util.BitSet PUNCT -> c
    java.util.BitSet USERINFO -> d
    java.util.BitSet PATHSAFE -> e
    java.util.BitSet FRAGMENT -> f
    java.util.BitSet RESERVED -> g
    java.util.BitSet URLENCODER -> h
    java.util.List parse(java.lang.String) -> a
    java.lang.String format(java.util.List,java.lang.String) -> a
    java.lang.String format(java.lang.Iterable,java.nio.charset.Charset) -> a
    java.lang.String urlencode(java.lang.String,java.nio.charset.Charset,java.util.BitSet,boolean) -> a
    java.lang.String encodeFormFields(java.lang.String,java.lang.String) -> a
    java.lang.String encodeFormFields(java.lang.String,java.nio.charset.Charset) -> d
    java.lang.String encUserInfo(java.lang.String,java.nio.charset.Charset) -> a
    java.lang.String encFragment(java.lang.String,java.nio.charset.Charset) -> b
    java.lang.String encPath(java.lang.String,java.nio.charset.Charset) -> c
com.lidroid.xutils.task.Node -> com.b.a.d.a:
    boolean valueAsT -> b
    com.lidroid.xutils.task.PriorityObject value -> c
    com.lidroid.xutils.task.Node next -> a
    com.lidroid.xutils.task.Priority getPriority() -> a
    java.lang.Object getValue() -> b
    void setValue(java.lang.Object) -> a
com.lidroid.xutils.task.Priority -> com.b.a.d.b:
    com.lidroid.xutils.task.Priority UI_TOP -> a
    com.lidroid.xutils.task.Priority UI_NORMAL -> b
    com.lidroid.xutils.task.Priority UI_LOW -> c
    com.lidroid.xutils.task.Priority DEFAULT -> d
    com.lidroid.xutils.task.Priority BG_TOP -> e
    com.lidroid.xutils.task.Priority BG_NORMAL -> f
    com.lidroid.xutils.task.Priority BG_LOW -> g
    com.lidroid.xutils.task.Priority[] ENUM$VALUES -> h
    com.lidroid.xutils.task.Priority[] values() -> values
    com.lidroid.xutils.task.Priority valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.task.PriorityAsyncTask -> com.b.a.d.c:
    com.lidroid.xutils.task.PriorityAsyncTask$InternalHandler sHandler -> b
    java.util.concurrent.Executor sDefaultExecutor -> a
    com.lidroid.xutils.task.PriorityAsyncTask$WorkerRunnable mWorker -> c
    java.util.concurrent.FutureTask mFuture -> d
    boolean mExecuteInvoked -> e
    java.util.concurrent.atomic.AtomicBoolean mCancelled -> f
    java.util.concurrent.atomic.AtomicBoolean mTaskInvoked -> g
    com.lidroid.xutils.task.Priority priority -> h
    void setPriority(com.lidroid.xutils.task.Priority) -> a
    void postResultIfNotInvoked(java.lang.Object) -> c
    java.lang.Object postResult(java.lang.Object) -> d
    java.lang.Object doInBackground(java.lang.Object[]) -> c
    void onPreExecute() -> a
    void onPostExecute(java.lang.Object) -> a
    void onProgressUpdate(java.lang.Object[]) -> b
    void onCancelled(java.lang.Object) -> b
    void onCancelled() -> b
    boolean isCancelled() -> c
    boolean cancel(boolean) -> cancel
    void cancel() -> cancel
    com.lidroid.xutils.task.PriorityAsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[]) -> a
    void publishProgress(java.lang.Object[]) -> d
    void finish(java.lang.Object) -> e
    void access$0(com.lidroid.xutils.task.PriorityAsyncTask,java.lang.Object) -> a
    java.util.concurrent.atomic.AtomicBoolean access$1(com.lidroid.xutils.task.PriorityAsyncTask) -> a
    java.lang.Object access$2(com.lidroid.xutils.task.PriorityAsyncTask,java.lang.Object) -> b
    void access$3(com.lidroid.xutils.task.PriorityAsyncTask,java.lang.Object) -> c
com.lidroid.xutils.task.PriorityAsyncTask$1 -> com.b.a.d.d:
    com.lidroid.xutils.task.PriorityAsyncTask this$0 -> a
    java.lang.Object call() -> call
com.lidroid.xutils.task.PriorityAsyncTask$2 -> com.b.a.d.e:
    com.lidroid.xutils.task.PriorityAsyncTask this$0 -> a
    void done() -> done
com.lidroid.xutils.task.PriorityAsyncTask$AsyncTaskResult -> com.b.a.d.f:
    com.lidroid.xutils.task.PriorityAsyncTask mTask -> a
    java.lang.Object[] mData -> b
com.lidroid.xutils.task.PriorityAsyncTask$InternalHandler -> com.b.a.d.g:
    void handleMessage(android.os.Message) -> handleMessage
com.lidroid.xutils.task.PriorityAsyncTask$WorkerRunnable -> com.b.a.d.h:
    java.lang.Object[] mParams -> b
com.lidroid.xutils.task.PriorityExecutor -> com.b.a.d.i:
    java.util.concurrent.ThreadFactory sThreadFactory -> a
    java.util.concurrent.BlockingQueue mPoolWorkQueue -> b
    java.util.concurrent.ThreadPoolExecutor mThreadPoolExecutor -> c
    void execute(java.lang.Runnable) -> execute
com.lidroid.xutils.task.PriorityExecutor$1 -> com.b.a.d.j:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.lidroid.xutils.task.PriorityObject -> com.b.a.d.k:
    com.lidroid.xutils.task.Priority priority -> a
    java.lang.Object obj -> b
com.lidroid.xutils.task.PriorityObjectBlockingQueue -> com.b.a.d.l:
    int capacity -> b
    java.util.concurrent.atomic.AtomicInteger count -> c
    com.lidroid.xutils.task.Node head -> a
    com.lidroid.xutils.task.Node last -> d
    java.util.concurrent.locks.ReentrantLock takeLock -> e
    java.util.concurrent.locks.Condition notEmpty -> f
    java.util.concurrent.locks.ReentrantLock putLock -> g
    java.util.concurrent.locks.Condition notFull -> h
    void signalNotEmpty() -> c
    void signalNotFull() -> d
    java.lang.Object opQueue(com.lidroid.xutils.task.Node) -> a
    void _enqueue(com.lidroid.xutils.task.Node) -> b
    java.lang.Object _dequeue() -> e
    void fullyLock() -> a
    void fullyUnlock() -> b
    int size() -> size
    int remainingCapacity() -> remainingCapacity
    void put(java.lang.Object) -> put
    boolean offer(java.lang.Object,long,java.util.concurrent.TimeUnit) -> offer
    boolean offer(java.lang.Object) -> offer
    java.lang.Object take() -> take
    java.lang.Object poll(long,java.util.concurrent.TimeUnit) -> poll
    java.lang.Object poll() -> poll
    java.lang.Object peek() -> peek
    void unlink(com.lidroid.xutils.task.Node,com.lidroid.xutils.task.Node) -> a
    boolean remove(java.lang.Object) -> remove
    boolean contains(java.lang.Object) -> contains
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
    void clear() -> clear
    int drainTo(java.util.Collection) -> drainTo
    int drainTo(java.util.Collection,int) -> drainTo
    java.util.Iterator iterator() -> iterator
com.lidroid.xutils.task.PriorityObjectBlockingQueue$Itr -> com.b.a.d.m:
    com.lidroid.xutils.task.Node current -> b
    com.lidroid.xutils.task.Node lastRet -> c
    java.lang.Object currentElement -> d
    com.lidroid.xutils.task.PriorityObjectBlockingQueue this$0 -> a
    boolean hasNext() -> hasNext
    com.lidroid.xutils.task.Node nextNode(com.lidroid.xutils.task.Node) -> a
    java.lang.Object next() -> next
    void remove() -> remove
com.lidroid.xutils.task.PriorityRunnable -> com.b.a.d.n:
    void run() -> run
com.lidroid.xutils.util.CharsetUtils -> com.b.a.e.a:
    java.util.List SUPPORT_CHARSET -> a
    java.lang.String toCharset(java.lang.String,java.lang.String,int) -> a
    java.lang.String getEncoding(java.lang.String,int) -> a
    boolean isCharset(java.lang.String,java.lang.String,int) -> b
com.lidroid.xutils.util.DoubleKeyValueMap -> com.b.a.e.b:
    java.util.concurrent.ConcurrentHashMap k1_k2V_map -> a
    void put(java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object,java.lang.Object) -> a
    void clear() -> clear
com.lidroid.xutils.util.IOUtils -> com.b.a.e.c:
    void closeQuietly(java.io.Closeable) -> a
com.lidroid.xutils.util.LogUtils -> com.b.a.e.d:
    java.lang.String customTagPrefix -> a
    boolean allowD -> b
    boolean allowE -> c
    boolean allowI -> d
    boolean allowV -> e
    boolean allowW -> f
    boolean allowWtf -> g
    com.lidroid.xutils.util.LogUtils$CustomLogger customLogger -> h
    java.lang.String generateTag(java.lang.StackTraceElement) -> a
    void d(java.lang.String) -> a
    void e(java.lang.String) -> b
    void e(java.lang.String,java.lang.Throwable) -> a
    void w(java.lang.Throwable) -> a
com.lidroid.xutils.util.LogUtils$CustomLogger -> com.b.a.e.e:
    void d(java.lang.String,java.lang.String) -> a
    void e(java.lang.String,java.lang.String) -> b
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void w(java.lang.String,java.lang.Throwable) -> a
com.lidroid.xutils.util.OtherUtils -> com.b.a.e.f:
    java.lang.String getUserAgent(android.content.Context) -> a
    boolean isSupportRange(org.apache.http.HttpResponse) -> a
    java.lang.String getFileNameFromHttpResponse(org.apache.http.HttpResponse) -> b
    java.nio.charset.Charset getCharsetFromHttpRequest(org.apache.http.client.methods.HttpRequestBase) -> a
    long sizeOfString(java.lang.String,java.lang.String) -> a
    java.lang.String getSubString(java.lang.String,int,int) -> a
    java.lang.StackTraceElement getCallerStackTraceElement() -> a
com.lidroid.xutils.view.EventListenerManager -> com.b.a.f.a:
    com.lidroid.xutils.util.DoubleKeyValueMap listenerCache -> a
    void addEventMethod(com.lidroid.xutils.view.ViewFinder,com.lidroid.xutils.view.ViewInjectInfo,java.lang.annotation.Annotation,java.lang.Object,java.lang.reflect.Method) -> a
com.lidroid.xutils.view.EventListenerManager$DynamicHandler -> com.b.a.f.b:
    java.lang.ref.WeakReference handlerRef -> a
    java.util.HashMap methodMap -> b
    void addMethod(java.lang.String,java.lang.reflect.Method) -> a
    java.lang.Object getHandler() -> a
    java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
com.lidroid.xutils.view.ResLoader -> com.b.a.f.c:
    int[] $SWITCH_TABLE$com$lidroid$xutils$view$ResType -> a
    java.lang.Object loadRes(com.lidroid.xutils.view.ResType,android.content.Context,int) -> a
    int[] $SWITCH_TABLE$com$lidroid$xutils$view$ResType() -> a
com.lidroid.xutils.view.ResType -> com.b.a.f.d:
    com.lidroid.xutils.view.ResType Animation -> a
    com.lidroid.xutils.view.ResType Boolean -> b
    com.lidroid.xutils.view.ResType Color -> c
    com.lidroid.xutils.view.ResType ColorStateList -> d
    com.lidroid.xutils.view.ResType Dimension -> e
    com.lidroid.xutils.view.ResType DimensionPixelOffset -> f
    com.lidroid.xutils.view.ResType DimensionPixelSize -> g
    com.lidroid.xutils.view.ResType Drawable -> h
    com.lidroid.xutils.view.ResType Integer -> i
    com.lidroid.xutils.view.ResType IntArray -> j
    com.lidroid.xutils.view.ResType Movie -> k
    com.lidroid.xutils.view.ResType String -> l
    com.lidroid.xutils.view.ResType StringArray -> m
    com.lidroid.xutils.view.ResType Text -> n
    com.lidroid.xutils.view.ResType TextArray -> o
    com.lidroid.xutils.view.ResType Xml -> p
    com.lidroid.xutils.view.ResType[] ENUM$VALUES -> q
    com.lidroid.xutils.view.ResType[] values() -> values
    com.lidroid.xutils.view.ResType valueOf(java.lang.String) -> valueOf
com.lidroid.xutils.view.ViewFinder -> com.b.a.f.e:
    android.view.View view -> a
    android.app.Activity activity -> b
    android.preference.PreferenceGroup preferenceGroup -> c
    android.preference.PreferenceActivity preferenceActivity -> d
    android.view.View findViewById(int) -> a
    android.view.View findViewByInfo(com.lidroid.xutils.view.ViewInjectInfo) -> a
    android.view.View findViewById(int,int) -> a
    android.preference.Preference findPreference(java.lang.CharSequence) -> a
    android.content.Context getContext() -> a
com.lidroid.xutils.view.ViewInjectInfo -> com.b.a.f.f:
    java.lang.Object value -> a
    int parentId -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.lidroid.xutils.view.annotation.ContentView -> com.b.a.f.a.a:
    int value() -> a
com.lidroid.xutils.view.annotation.PreferenceInject -> com.b.a.f.a.b:
    java.lang.String value() -> a
com.lidroid.xutils.view.annotation.ResInject -> com.b.a.f.a.c:
    int id() -> a
    com.lidroid.xutils.view.ResType type() -> b
com.lidroid.xutils.view.annotation.ViewInject -> com.b.a.f.a.d:
    int value() -> a
    int parentId() -> b
com.lidroid.xutils.view.annotation.event.EventBase -> com.b.a.f.a.a.a:
    java.lang.Class listenerType() -> a
    java.lang.String listenerSetter() -> b
    java.lang.String methodName() -> c
com.rolfwang.mobilesafe.ChangePostionActivity -> com.rolfwang.mobilesafe.ChangePostionActivity:
    android.widget.LinearLayout ll_show -> a
    android.widget.TextView tv_top -> b
    android.widget.TextView tv_bottom -> c
    android.content.SharedPreferences sp -> d
    int displayWidth -> e
    int displayHeight -> f
    android.view.WindowManager wm -> g
    void onCreate(android.os.Bundle) -> onCreate
    void doubleClick() -> a
    void getDisplaySize() -> b
    void onStart() -> onStart
    void onchangePosition() -> c
    int access$0(com.rolfwang.mobilesafe.ChangePostionActivity) -> a
    android.widget.LinearLayout access$1(com.rolfwang.mobilesafe.ChangePostionActivity) -> b
    int access$2(com.rolfwang.mobilesafe.ChangePostionActivity) -> c
    android.widget.TextView access$3(com.rolfwang.mobilesafe.ChangePostionActivity) -> d
    android.widget.TextView access$4(com.rolfwang.mobilesafe.ChangePostionActivity) -> e
    android.content.SharedPreferences access$5(com.rolfwang.mobilesafe.ChangePostionActivity) -> f
com.rolfwang.mobilesafe.ChangePostionActivity$1 -> com.rolfwang.mobilesafe.a:
    long[] hits -> a
    com.rolfwang.mobilesafe.ChangePostionActivity this$0 -> b
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.ChangePostionActivity$2 -> com.rolfwang.mobilesafe.b:
    int startX -> a
    int startY -> b
    com.rolfwang.mobilesafe.ChangePostionActivity this$0 -> c
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.rolfwang.mobilesafe.ContactActivity -> com.rolfwang.mobilesafe.ContactActivity:
    android.widget.ListView lv_contact -> a
    java.util.List allContacts -> b
    android.os.Handler handler -> c
    android.widget.ProgressBar pb -> d
    void onCreate(android.os.Bundle) -> onCreate
    android.widget.ListView access$0(com.rolfwang.mobilesafe.ContactActivity) -> a
    android.widget.ProgressBar access$1(com.rolfwang.mobilesafe.ContactActivity) -> b
    java.util.List access$2(com.rolfwang.mobilesafe.ContactActivity) -> c
    void access$3(com.rolfwang.mobilesafe.ContactActivity,java.util.List) -> a
com.rolfwang.mobilesafe.ContactActivity$1 -> com.rolfwang.mobilesafe.c:
    com.rolfwang.mobilesafe.ContactActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.rolfwang.mobilesafe.ContactActivity$2 -> com.rolfwang.mobilesafe.d:
    com.rolfwang.mobilesafe.ContactActivity this$0 -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.rolfwang.mobilesafe.ContactActivity$3 -> com.rolfwang.mobilesafe.e:
    com.rolfwang.mobilesafe.ContactActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.rolfwang.mobilesafe.ContactActivity$MyListViewAdapter -> com.rolfwang.mobilesafe.f:
    com.rolfwang.mobilesafe.ContactActivity this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
com.rolfwang.mobilesafe.HomeActivity -> com.rolfwang.mobilesafe.HomeActivity:
    android.widget.GridView gv_home -> a
    android.content.SharedPreferences sp -> b
    int count -> c
    void onCreate(android.os.Bundle) -> onCreate
    void createShortCut() -> c
    void showEnterDialog() -> a
    void showSetupDialog() -> b
    android.content.SharedPreferences access$0(com.rolfwang.mobilesafe.HomeActivity) -> a
    int access$1(com.rolfwang.mobilesafe.HomeActivity) -> b
    void access$2(com.rolfwang.mobilesafe.HomeActivity,int) -> a
com.rolfwang.mobilesafe.HomeActivity$1 -> com.rolfwang.mobilesafe.g:
    com.rolfwang.mobilesafe.HomeActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.rolfwang.mobilesafe.HomeActivity$2 -> com.rolfwang.mobilesafe.h:
    com.rolfwang.mobilesafe.HomeActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.rolfwang.mobilesafe.HomeActivity$3 -> com.rolfwang.mobilesafe.i:
    com.rolfwang.mobilesafe.HomeActivity this$0 -> a
    android.widget.EditText val$et_password -> b
    android.app.AlertDialog val$dialog -> c
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.HomeActivity$4 -> com.rolfwang.mobilesafe.j:
    com.rolfwang.mobilesafe.HomeActivity this$0 -> a
    android.app.AlertDialog val$dialog -> b
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.HomeActivity$5 -> com.rolfwang.mobilesafe.k:
    com.rolfwang.mobilesafe.HomeActivity this$0 -> a
    android.widget.EditText val$et_password -> b
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.HomeActivity$6 -> com.rolfwang.mobilesafe.l:
    com.rolfwang.mobilesafe.HomeActivity this$0 -> a
    android.widget.EditText val$et_password -> b
    android.widget.EditText val$et_password_confirm -> c
    android.app.AlertDialog val$dialog -> d
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.HomeActivity$7 -> com.rolfwang.mobilesafe.m:
    com.rolfwang.mobilesafe.HomeActivity this$0 -> a
    android.app.AlertDialog val$dialog -> b
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.HomeActivity$MyGridViewAdapter -> com.rolfwang.mobilesafe.n:
    int[] imageId -> a
    java.lang.String[] names -> b
    com.rolfwang.mobilesafe.HomeActivity this$0 -> c
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
com.rolfwang.mobilesafe.LostFindActivity -> com.rolfwang.mobilesafe.LostFindActivity:
    android.widget.TextView tv_safeNum -> a
    android.content.SharedPreferences sp -> b
    android.widget.ImageView iv_protected -> c
    boolean protectedFlag -> d
    void onCreate(android.os.Bundle) -> onCreate
    void protectedFun(android.view.View) -> protectedFun
    void resetGuid(android.view.View) -> resetGuid
com.rolfwang.mobilesafe.R -> com.rolfwang.mobilesafe.o:
com.rolfwang.mobilesafe.R$styleable -> com.rolfwang.mobilesafe.p:
    int[] com_rolfwang_mobilesafe_ui_SettingView -> com_rolfwang_mobilesafe_ui_SettingView
    int com_rolfwang_mobilesafe_ui_SettingView_des -> com_rolfwang_mobilesafe_ui_SettingView_des
    int com_rolfwang_mobilesafe_ui_SettingView_des_off -> com_rolfwang_mobilesafe_ui_SettingView_des_off
    int com_rolfwang_mobilesafe_ui_SettingView_des_on -> com_rolfwang_mobilesafe_ui_SettingView_des_on
    int com_rolfwang_mobilesafe_ui_SettingView_title -> com_rolfwang_mobilesafe_ui_SettingView_title
com.rolfwang.mobilesafe.SettingActivity -> com.rolfwang.mobilesafe.SettingActivity:
    com.rolfwang.mobilesafe.ui.SettingView sv_update -> a
    com.rolfwang.mobilesafe.ui.SettingView sv_address -> b
    com.rolfwang.mobilesafe.ui.SettingEnterView sev_style -> c
    com.rolfwang.mobilesafe.ui.SettingEnterView sev_postion -> d
    com.rolfwang.mobilesafe.ui.SettingView sv_black_service -> e
    com.rolfwang.mobilesafe.ui.SettingEnterView sev_shortcut -> f
    com.rolfwang.mobilesafe.ui.SettingView sv_sorf_lock -> g
    android.content.SharedPreferences sp -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void setSoftLockClick() -> a
    void shortcut() -> b
    void setBlackNumClick() -> c
    void enterChangePostion() -> d
    void changeLocationStyle() -> e
    com.rolfwang.mobilesafe.ui.SettingView access$0(com.rolfwang.mobilesafe.SettingActivity) -> a
    android.content.SharedPreferences access$1(com.rolfwang.mobilesafe.SettingActivity) -> b
    com.rolfwang.mobilesafe.ui.SettingView access$2(com.rolfwang.mobilesafe.SettingActivity) -> c
    com.rolfwang.mobilesafe.ui.SettingView access$3(com.rolfwang.mobilesafe.SettingActivity) -> d
    com.rolfwang.mobilesafe.ui.SettingView access$4(com.rolfwang.mobilesafe.SettingActivity) -> e
    com.rolfwang.mobilesafe.ui.SettingEnterView access$5(com.rolfwang.mobilesafe.SettingActivity) -> f
com.rolfwang.mobilesafe.SettingActivity$1 -> com.rolfwang.mobilesafe.q:
    com.rolfwang.mobilesafe.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.SettingActivity$2 -> com.rolfwang.mobilesafe.r:
    android.content.Intent intent -> a
    com.rolfwang.mobilesafe.SettingActivity this$0 -> b
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.SettingActivity$3 -> com.rolfwang.mobilesafe.s:
    android.content.Intent service -> a
    com.rolfwang.mobilesafe.SettingActivity this$0 -> b
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.SettingActivity$4 -> com.rolfwang.mobilesafe.t:
    com.rolfwang.mobilesafe.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
    com.rolfwang.mobilesafe.SettingActivity access$0(com.rolfwang.mobilesafe.SettingActivity$4) -> a
com.rolfwang.mobilesafe.SettingActivity$4$1 -> com.rolfwang.mobilesafe.u:
    com.rolfwang.mobilesafe.SettingActivity$4 this$1 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.rolfwang.mobilesafe.SettingActivity$5 -> com.rolfwang.mobilesafe.v:
    com.rolfwang.mobilesafe.SettingActivity this$0 -> a
    android.content.Intent val$intent -> b
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.SettingActivity$6 -> com.rolfwang.mobilesafe.w:
    com.rolfwang.mobilesafe.SettingActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.SettingActivity$7 -> com.rolfwang.mobilesafe.x:
    com.rolfwang.mobilesafe.SettingActivity this$0 -> a
    java.lang.String[] val$items -> b
    void onClick(android.view.View) -> onClick
    com.rolfwang.mobilesafe.SettingActivity access$0(com.rolfwang.mobilesafe.SettingActivity$7) -> a
com.rolfwang.mobilesafe.SettingActivity$7$1 -> com.rolfwang.mobilesafe.y:
    com.rolfwang.mobilesafe.SettingActivity$7 this$1 -> a
    java.lang.String[] val$items -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.rolfwang.mobilesafe.Setup1Activity -> com.rolfwang.mobilesafe.Setup1Activity:
    void onCreate(android.os.Bundle) -> onCreate
    void next_activity() -> a
    void previous_activity() -> b
com.rolfwang.mobilesafe.Setup2Activity -> com.rolfwang.mobilesafe.Setup2Activity:
    com.rolfwang.mobilesafe.ui.SettingView sv_bind -> a
    android.content.SharedPreferences sp -> b
    android.telephony.TelephonyManager tm -> c
    void onCreate(android.os.Bundle) -> onCreate
    void next_activity() -> a
    void previous_activity() -> b
    com.rolfwang.mobilesafe.ui.SettingView access$0(com.rolfwang.mobilesafe.Setup2Activity) -> a
    android.content.SharedPreferences access$1(com.rolfwang.mobilesafe.Setup2Activity) -> b
    android.telephony.TelephonyManager access$2(com.rolfwang.mobilesafe.Setup2Activity) -> c
com.rolfwang.mobilesafe.Setup2Activity$1 -> com.rolfwang.mobilesafe.z:
    com.rolfwang.mobilesafe.Setup2Activity this$0 -> a
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.Setup3Activity -> com.rolfwang.mobilesafe.Setup3Activity:
    android.content.SharedPreferences sp -> a
    android.widget.EditText et_safeNum -> b
    void onCreate(android.os.Bundle) -> onCreate
    void next_activity() -> a
    void previous_activity() -> b
    void selectContant(android.view.View) -> selectContant
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
com.rolfwang.mobilesafe.Setup4Activity -> com.rolfwang.mobilesafe.Setup4Activity:
    android.content.SharedPreferences sp -> a
    android.widget.CheckBox cb_protected -> b
    android.widget.TextView tv_active -> c
    android.app.admin.DevicePolicyManager dpm -> d
    android.content.ComponentName component -> e
    void onCreate(android.os.Bundle) -> onCreate
    void next_activity() -> a
    void previous_activity() -> b
    void active(android.view.View) -> active
    android.content.SharedPreferences access$0(com.rolfwang.mobilesafe.Setup4Activity) -> a
    android.widget.CheckBox access$1(com.rolfwang.mobilesafe.Setup4Activity) -> b
com.rolfwang.mobilesafe.Setup4Activity$1 -> com.rolfwang.mobilesafe.aa:
    com.rolfwang.mobilesafe.Setup4Activity this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.rolfwang.mobilesafe.SetupBaseActivity -> com.rolfwang.mobilesafe.ab:
    android.view.GestureDetector detector -> a
    void next_activity() -> a
    void previous_activity() -> b
    void onCreate(android.os.Bundle) -> onCreate
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onBackPressed() -> onBackPressed
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void next(android.view.View) -> next
    void pre(android.view.View) -> pre
com.rolfwang.mobilesafe.SetupBaseActivity$MyGestureListener -> com.rolfwang.mobilesafe.ac:
    com.rolfwang.mobilesafe.SetupBaseActivity this$0 -> a
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
com.rolfwang.mobilesafe.SplashActivity -> com.rolfwang.mobilesafe.SplashActivity:
    java.lang.String newVersion -> a
    java.lang.String apkUrl -> b
    java.lang.String des -> c
    android.widget.TextView tv_splash_version -> d
    java.lang.String versionName -> e
    android.widget.TextView tv_load -> f
    android.content.SharedPreferences sp -> g
    android.os.Handler handler -> h
    void onCreate(android.os.Bundle) -> onCreate
    void copyDBtoApp(java.lang.String) -> b
    void checkUpdate() -> d
    void enterHome() -> a
    void showUpdateDialog() -> b
    void downloadApk() -> c
    void installApk(java.lang.String) -> a
    java.lang.String getVersion() -> e
    android.os.Handler access$0(com.rolfwang.mobilesafe.SplashActivity) -> a
    void access$1(com.rolfwang.mobilesafe.SplashActivity,java.lang.String) -> a
    void access$2(com.rolfwang.mobilesafe.SplashActivity,java.lang.String) -> b
    void access$3(com.rolfwang.mobilesafe.SplashActivity,java.lang.String) -> c
    java.lang.String access$4(com.rolfwang.mobilesafe.SplashActivity) -> b
    java.lang.String access$5(com.rolfwang.mobilesafe.SplashActivity) -> c
    android.widget.TextView access$6(com.rolfwang.mobilesafe.SplashActivity) -> d
com.rolfwang.mobilesafe.SplashActivity$1 -> com.rolfwang.mobilesafe.ad:
    com.rolfwang.mobilesafe.SplashActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.rolfwang.mobilesafe.SplashActivity$2 -> com.rolfwang.mobilesafe.ae:
    com.rolfwang.mobilesafe.SplashActivity this$0 -> a
    void run() -> run
com.rolfwang.mobilesafe.SplashActivity$3 -> com.rolfwang.mobilesafe.af:
    java.io.InputStream is -> a
    com.rolfwang.mobilesafe.SplashActivity this$0 -> b
    java.io.File val$dest -> c
    java.lang.String val$dbName -> d
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPreExecute() -> onPreExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.rolfwang.mobilesafe.SplashActivity$4 -> com.rolfwang.mobilesafe.ag:
    com.rolfwang.mobilesafe.SplashActivity this$0 -> a
    void run() -> run
com.rolfwang.mobilesafe.SplashActivity$5 -> com.rolfwang.mobilesafe.ah:
    com.rolfwang.mobilesafe.SplashActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.rolfwang.mobilesafe.SplashActivity$6 -> com.rolfwang.mobilesafe.ai:
    com.rolfwang.mobilesafe.SplashActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.rolfwang.mobilesafe.SplashActivity$7 -> com.rolfwang.mobilesafe.aj:
    com.rolfwang.mobilesafe.SplashActivity this$0 -> a
    void onSuccess(com.lidroid.xutils.http.ResponseInfo) -> a
    void onLoading(long,long,boolean) -> a
    void onFailure(com.lidroid.xutils.exception.HttpException,java.lang.String) -> a
com.rolfwang.mobilesafe.advanced.AToolsActivity -> com.rolfwang.mobilesafe.advanced.AToolsActivity:
    android.os.Handler handler -> a
    void onCreate(android.os.Bundle) -> onCreate
    void queryAddress(android.view.View) -> queryAddress
    void backupSms(android.view.View) -> backupSms
    void restore(android.view.View) -> restore
    android.os.Handler access$0(com.rolfwang.mobilesafe.advanced.AToolsActivity) -> a
com.rolfwang.mobilesafe.advanced.AToolsActivity$1 -> com.rolfwang.mobilesafe.advanced.a:
    com.rolfwang.mobilesafe.advanced.AToolsActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.rolfwang.mobilesafe.advanced.AToolsActivity$2 -> com.rolfwang.mobilesafe.advanced.b:
    com.rolfwang.mobilesafe.advanced.AToolsActivity this$0 -> a
    java.io.File val$sdPath -> b
    android.app.ProgressDialog val$progressDialog -> c
    void run() -> run
    com.rolfwang.mobilesafe.advanced.AToolsActivity access$0(com.rolfwang.mobilesafe.advanced.AToolsActivity$2) -> a
com.rolfwang.mobilesafe.advanced.AToolsActivity$2$1 -> com.rolfwang.mobilesafe.advanced.c:
    int max -> a
    com.rolfwang.mobilesafe.advanced.AToolsActivity$2 this$1 -> b
    android.app.ProgressDialog val$progressDialog -> c
    void process(int) -> a
    void max(int) -> b
com.rolfwang.mobilesafe.advanced.AToolsActivity$3 -> com.rolfwang.mobilesafe.advanced.d:
    com.rolfwang.mobilesafe.advanced.AToolsActivity this$0 -> a
    java.io.File val$sdPath -> b
    android.app.ProgressDialog val$progressDialog -> c
    void run() -> run
    com.rolfwang.mobilesafe.advanced.AToolsActivity access$0(com.rolfwang.mobilesafe.advanced.AToolsActivity$3) -> a
com.rolfwang.mobilesafe.advanced.AToolsActivity$3$1 -> com.rolfwang.mobilesafe.advanced.e:
    int max -> a
    com.rolfwang.mobilesafe.advanced.AToolsActivity$3 this$1 -> b
    android.app.ProgressDialog val$progressDialog -> c
    void process(int) -> a
    void max(int) -> b
com.rolfwang.mobilesafe.advanced.QueryAddressActivity -> com.rolfwang.mobilesafe.advanced.QueryAddressActivity:
    android.widget.EditText et_phoneNum -> a
    android.widget.TextView tv_address -> b
    void onCreate(android.os.Bundle) -> onCreate
    void query(android.view.View) -> query
    android.widget.TextView access$0(com.rolfwang.mobilesafe.advanced.QueryAddressActivity) -> a
com.rolfwang.mobilesafe.advanced.QueryAddressActivity$1 -> com.rolfwang.mobilesafe.advanced.f:
    com.rolfwang.mobilesafe.advanced.QueryAddressActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.rolfwang.mobilesafe.antivirus.AntivirusActivity -> com.rolfwang.mobilesafe.antivirus.AntivirusActivity:
    android.widget.TextView tv_scanner -> a
    android.widget.ProgressBar pb_scanner -> b
    android.widget.ImageView iv_sanner -> c
    android.widget.LinearLayout ll_content -> d
    android.widget.TextView tv_count -> e
    android.content.pm.PackageManager packageManager -> f
    java.util.List installedPackages -> g
    java.util.List virusPackageNames -> h
    java.util.List virusLables -> i
    com.rolfwang.mobilesafe.db.dao.AntivirusDao antivirusDao -> j
    int virusCount -> k
    android.os.Handler handler -> l
    android.view.animation.RotateAnimation animation -> m
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void scannerVirus() -> a
    void againScan(android.view.View) -> againScan
    void clear(android.view.View) -> clear
    android.widget.TextView access$0(com.rolfwang.mobilesafe.antivirus.AntivirusActivity) -> a
    android.widget.LinearLayout access$1(com.rolfwang.mobilesafe.antivirus.AntivirusActivity) -> b
    int access$2(com.rolfwang.mobilesafe.antivirus.AntivirusActivity) -> c
    android.widget.TextView access$3(com.rolfwang.mobilesafe.antivirus.AntivirusActivity) -> d
    android.widget.ProgressBar access$4(com.rolfwang.mobilesafe.antivirus.AntivirusActivity) -> e
    void access$5(com.rolfwang.mobilesafe.antivirus.AntivirusActivity,android.content.pm.PackageManager) -> a
    android.content.pm.PackageManager access$6(com.rolfwang.mobilesafe.antivirus.AntivirusActivity) -> f
    void access$7(com.rolfwang.mobilesafe.antivirus.AntivirusActivity,java.util.List) -> a
    java.util.List access$8(com.rolfwang.mobilesafe.antivirus.AntivirusActivity) -> g
    com.rolfwang.mobilesafe.db.dao.AntivirusDao access$9(com.rolfwang.mobilesafe.antivirus.AntivirusActivity) -> h
    java.util.List access$10(com.rolfwang.mobilesafe.antivirus.AntivirusActivity) -> i
    java.util.List access$11(com.rolfwang.mobilesafe.antivirus.AntivirusActivity) -> j
    void access$12(com.rolfwang.mobilesafe.antivirus.AntivirusActivity,int) -> a
    android.os.Handler access$13(com.rolfwang.mobilesafe.antivirus.AntivirusActivity) -> k
    android.widget.ImageView access$14(com.rolfwang.mobilesafe.antivirus.AntivirusActivity) -> l
com.rolfwang.mobilesafe.antivirus.AntivirusActivity$1 -> com.rolfwang.mobilesafe.antivirus.a:
    com.rolfwang.mobilesafe.antivirus.AntivirusActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.rolfwang.mobilesafe.antivirus.AntivirusActivity$2 -> com.rolfwang.mobilesafe.antivirus.b:
    com.rolfwang.mobilesafe.antivirus.AntivirusActivity this$0 -> a
    void run() -> run
    com.rolfwang.mobilesafe.antivirus.AntivirusActivity access$0(com.rolfwang.mobilesafe.antivirus.AntivirusActivity$2) -> a
com.rolfwang.mobilesafe.antivirus.AntivirusActivity$2$1 -> com.rolfwang.mobilesafe.antivirus.c:
    com.rolfwang.mobilesafe.antivirus.AntivirusActivity$2 this$1 -> a
    void run() -> run
com.rolfwang.mobilesafe.application.MyApplication -> com.rolfwang.mobilesafe.application.MyApplication:
    void onCreate() -> onCreate
com.rolfwang.mobilesafe.application.MyApplication$MyExceptionHandler -> com.rolfwang.mobilesafe.application.a:
    com.rolfwang.mobilesafe.application.MyApplication this$0 -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
com.rolfwang.mobilesafe.cache.ClearCacheActivity -> com.rolfwang.mobilesafe.cache.ClearCacheActivity:
    android.widget.TextView tv_clear_cache -> n
    android.widget.TextView tv_clear_sd -> o
    android.support.v4.app.FragmentManager fragmentManager -> p
    android.support.v4.app.FragmentTransaction fragmentTransaction -> q
    boolean flag -> r
    android.support.v4.app.Fragment clearCacheFragment -> s
    android.support.v4.app.Fragment clearSDFragment -> t
    void onCreate(android.os.Bundle) -> onCreate
    boolean access$0(com.rolfwang.mobilesafe.cache.ClearCacheActivity) -> a
    void access$1(com.rolfwang.mobilesafe.cache.ClearCacheActivity,boolean) -> a
    android.widget.TextView access$2(com.rolfwang.mobilesafe.cache.ClearCacheActivity) -> b
    android.widget.TextView access$3(com.rolfwang.mobilesafe.cache.ClearCacheActivity) -> c
    android.support.v4.app.FragmentManager access$4(com.rolfwang.mobilesafe.cache.ClearCacheActivity) -> d
    void access$5(com.rolfwang.mobilesafe.cache.ClearCacheActivity,android.support.v4.app.FragmentTransaction) -> a
    android.support.v4.app.FragmentTransaction access$6(com.rolfwang.mobilesafe.cache.ClearCacheActivity) -> e
    android.support.v4.app.Fragment access$7(com.rolfwang.mobilesafe.cache.ClearCacheActivity) -> f
    android.support.v4.app.Fragment access$8(com.rolfwang.mobilesafe.cache.ClearCacheActivity) -> g
com.rolfwang.mobilesafe.cache.ClearCacheActivity$1 -> com.rolfwang.mobilesafe.cache.a:
    com.rolfwang.mobilesafe.cache.ClearCacheActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.cache.ClearCacheActivity$2 -> com.rolfwang.mobilesafe.cache.b:
    com.rolfwang.mobilesafe.cache.ClearCacheActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.cache.ClearCacheFragment -> com.rolfwang.mobilesafe.cache.c:
    android.widget.ImageView iv_scanner -> R
    android.widget.TextView tv_scanner -> S
    android.widget.ProgressBar pb_scanner -> T
    android.widget.ListView lv_content -> U
    android.widget.Button bt_again -> V
    android.widget.Button bt_clear -> W
    android.content.pm.PackageManager packageManager -> X
    android.support.v4.app.FragmentActivity activity -> Y
    com.rolfwang.mobilesafe.cache.ClearCacheFragment$MyAdapter adapter -> Z
    java.util.List allCacheInfos -> aa
    android.content.pm.IPackageStatsObserver$Stub observer -> P
    android.content.pm.IPackageDataObserver$Stub dataObserver -> Q
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void scannerCache() -> w
    void getAppCacheSize(java.lang.String) -> a
    void clearAllCache() -> x
    java.util.List access$0(com.rolfwang.mobilesafe.cache.ClearCacheFragment) -> a
    android.support.v4.app.FragmentActivity access$1(com.rolfwang.mobilesafe.cache.ClearCacheFragment) -> b
    com.rolfwang.mobilesafe.cache.ClearCacheFragment$MyAdapter access$2(com.rolfwang.mobilesafe.cache.ClearCacheFragment) -> c
    android.widget.TextView access$3(com.rolfwang.mobilesafe.cache.ClearCacheFragment) -> d
    android.content.pm.PackageManager access$4(com.rolfwang.mobilesafe.cache.ClearCacheFragment) -> e
    android.widget.Button access$5(com.rolfwang.mobilesafe.cache.ClearCacheFragment) -> f
    void access$6(com.rolfwang.mobilesafe.cache.ClearCacheFragment) -> g
    void access$7(com.rolfwang.mobilesafe.cache.ClearCacheFragment) -> h
    android.widget.ProgressBar access$8(com.rolfwang.mobilesafe.cache.ClearCacheFragment) -> i
    void access$9(com.rolfwang.mobilesafe.cache.ClearCacheFragment,java.lang.String) -> a
    void access$10(com.rolfwang.mobilesafe.cache.ClearCacheFragment,com.rolfwang.mobilesafe.cache.ClearCacheFragment$MyAdapter) -> a
    android.widget.ListView access$11(com.rolfwang.mobilesafe.cache.ClearCacheFragment) -> j
    android.widget.ImageView access$12(com.rolfwang.mobilesafe.cache.ClearCacheFragment) -> k
com.rolfwang.mobilesafe.cache.ClearCacheFragment$1 -> com.rolfwang.mobilesafe.cache.d:
    com.rolfwang.mobilesafe.cache.ClearCacheFragment this$0 -> a
    void onGetStatsCompleted(android.content.pm.PackageStats,boolean) -> a
com.rolfwang.mobilesafe.cache.ClearCacheFragment$2 -> com.rolfwang.mobilesafe.cache.e:
    com.rolfwang.mobilesafe.cache.ClearCacheFragment this$0 -> a
    void onRemoveCompleted(java.lang.String,boolean) -> a
    com.rolfwang.mobilesafe.cache.ClearCacheFragment access$0(com.rolfwang.mobilesafe.cache.ClearCacheFragment$2) -> a
com.rolfwang.mobilesafe.cache.ClearCacheFragment$2$1 -> com.rolfwang.mobilesafe.cache.f:
    com.rolfwang.mobilesafe.cache.ClearCacheFragment$2 this$1 -> a
    void run() -> run
com.rolfwang.mobilesafe.cache.ClearCacheFragment$3 -> com.rolfwang.mobilesafe.cache.g:
    com.rolfwang.mobilesafe.cache.ClearCacheFragment this$0 -> a
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.cache.ClearCacheFragment$4 -> com.rolfwang.mobilesafe.cache.h:
    com.rolfwang.mobilesafe.cache.ClearCacheFragment this$0 -> a
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.cache.ClearCacheFragment$5 -> com.rolfwang.mobilesafe.cache.i:
    com.rolfwang.mobilesafe.cache.ClearCacheFragment this$0 -> a
    void run() -> run
    com.rolfwang.mobilesafe.cache.ClearCacheFragment access$0(com.rolfwang.mobilesafe.cache.ClearCacheFragment$5) -> a
com.rolfwang.mobilesafe.cache.ClearCacheFragment$5$1 -> com.rolfwang.mobilesafe.cache.j:
    com.rolfwang.mobilesafe.cache.ClearCacheFragment$5 this$1 -> a
    java.lang.String val$lable -> b
    void run() -> run
com.rolfwang.mobilesafe.cache.ClearCacheFragment$5$2 -> com.rolfwang.mobilesafe.cache.k:
    com.rolfwang.mobilesafe.cache.ClearCacheFragment$5 this$1 -> a
    void run() -> run
com.rolfwang.mobilesafe.cache.ClearCacheFragment$CacheInfo -> com.rolfwang.mobilesafe.cache.l:
    java.lang.String packageName -> b
    long cacheSize -> c
    com.rolfwang.mobilesafe.cache.ClearCacheFragment this$0 -> a
    java.lang.String getPackageName() -> a
    void setPackageName(java.lang.String) -> a
    long getCacheSize() -> b
    void setCacheSize(long) -> a
com.rolfwang.mobilesafe.cache.ClearCacheFragment$MyAdapter -> com.rolfwang.mobilesafe.cache.m:
    com.rolfwang.mobilesafe.cache.ClearCacheFragment this$0 -> a
    int getCount() -> getCount
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
com.rolfwang.mobilesafe.cache.ClearCacheFragment$ViewHolder -> com.rolfwang.mobilesafe.cache.n:
    android.widget.ImageView iv_icon -> b
    android.widget.TextView tv_name -> c
    android.widget.TextView tv_cache_size -> d
    com.rolfwang.mobilesafe.cache.ClearCacheFragment this$0 -> a
    void access$0(com.rolfwang.mobilesafe.cache.ClearCacheFragment$ViewHolder,android.widget.ImageView) -> a
    void access$1(com.rolfwang.mobilesafe.cache.ClearCacheFragment$ViewHolder,android.widget.TextView) -> a
    void access$2(com.rolfwang.mobilesafe.cache.ClearCacheFragment$ViewHolder,android.widget.TextView) -> b
    android.widget.TextView access$3(com.rolfwang.mobilesafe.cache.ClearCacheFragment$ViewHolder) -> a
    android.widget.ImageView access$4(com.rolfwang.mobilesafe.cache.ClearCacheFragment$ViewHolder) -> b
    android.widget.TextView access$5(com.rolfwang.mobilesafe.cache.ClearCacheFragment$ViewHolder) -> c
com.rolfwang.mobilesafe.cache.ClearSDFragment -> com.rolfwang.mobilesafe.cache.o:
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
com.rolfwang.mobilesafe.db.BlackNumDBHelper -> com.rolfwang.mobilesafe.a.a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.rolfwang.mobilesafe.db.WatchDogDBHelper -> com.rolfwang.mobilesafe.a.b:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.rolfwang.mobilesafe.db.dao.AddressDao -> com.rolfwang.mobilesafe.a.a.a:
    java.lang.String queryAddress(java.lang.String,android.content.Context) -> queryAddress
com.rolfwang.mobilesafe.db.dao.AntivirusDao -> com.rolfwang.mobilesafe.a.a.b:
    android.content.Context context -> a
    boolean isVirus(java.lang.String) -> a
com.rolfwang.mobilesafe.db.dao.BlackNumDao -> com.rolfwang.mobilesafe.a.a.c:
    android.content.Context context -> a
    void insertBlackNum(java.lang.String,int) -> a
    int deleteBlackNum(java.lang.String) -> a
    java.util.List queryPart(int,int) -> a
    int queryMode(java.lang.String) -> b
com.rolfwang.mobilesafe.db.dao.WatchDogDao -> com.rolfwang.mobilesafe.a.a.d:
    android.net.Uri URI_LOCK_DB_CHANGED -> a
    android.content.Context context -> b
    long addLockedApp(java.lang.String) -> a
    int updateLockedState(java.lang.String,int) -> a
    java.util.Map queryAllLockedApp() -> a
com.rolfwang.mobilesafe.domain.AppInfo -> com.rolfwang.mobilesafe.b.a:
    java.lang.String appPackageName -> a
    java.lang.String appVersion -> b
    java.lang.String appName -> c
    android.graphics.drawable.Drawable appIcon -> d
    boolean isSD -> e
    boolean isUser -> f
    java.lang.String getAppPackageName() -> a
    void setAppPackageName(java.lang.String) -> a
    java.lang.String getAppVersion() -> b
    void setAppVersion(java.lang.String) -> b
    java.lang.String getAppName() -> c
    void setAppName(java.lang.String) -> c
    boolean isSD() -> d
    void setSD(boolean) -> a
    boolean isUser() -> e
    void setUser(boolean) -> b
    android.graphics.drawable.Drawable getAppIcon() -> f
    void setAppIcon(android.graphics.drawable.Drawable) -> a
    java.lang.String toString() -> toString
com.rolfwang.mobilesafe.domain.BlackNumInfo -> com.rolfwang.mobilesafe.b.b:
    int id -> a
    java.lang.String blackNum -> b
    int mode -> c
    void setId(int) -> a
    int getMode() -> a
    void setMode(int) -> b
    java.lang.String toString() -> toString
    java.lang.String getBlackNum() -> b
    void setBlackNum(java.lang.String) -> a
com.rolfwang.mobilesafe.domain.ContactInfo -> com.rolfwang.mobilesafe.b.c:
    java.lang.String num -> a
    java.lang.String name -> b
    java.lang.String email -> c
    java.lang.String getNum() -> a
    void setNum(java.lang.String) -> a
    java.lang.String getName() -> b
    void setName(java.lang.String) -> b
    void setEmail(java.lang.String) -> c
    java.lang.String toString() -> toString
com.rolfwang.mobilesafe.domain.TaskInfo -> com.rolfwang.mobilesafe.b.d:
    java.lang.String name -> a
    java.lang.String packageName -> b
    android.graphics.drawable.Drawable icon -> c
    boolean isUser -> d
    long mem -> e
    boolean isChecked -> f
    boolean isChecked() -> a
    void setChecked(boolean) -> a
    java.lang.String getName() -> b
    void setName(java.lang.String) -> a
    java.lang.String getPackageName() -> c
    void setPackageName(java.lang.String) -> b
    android.graphics.drawable.Drawable getIcon() -> d
    void setIcon(android.graphics.drawable.Drawable) -> a
    boolean isUser() -> e
    void setUser(boolean) -> b
    long getMem() -> f
    void setMem(long) -> a
    java.lang.String toString() -> toString
com.rolfwang.mobilesafe.engine.AppProvider -> com.rolfwang.mobilesafe.c.a:
    java.util.List getAllAppInfos(android.content.Context) -> a
com.rolfwang.mobilesafe.engine.ContactsEngine -> com.rolfwang.mobilesafe.c.b:
    java.util.List getAllContacts(android.content.Context) -> a
com.rolfwang.mobilesafe.engine.SmsEngine -> com.rolfwang.mobilesafe.c.c:
    void backupSms(android.content.Context,java.lang.String,com.rolfwang.mobilesafe.engine.SmsEngine$ProcessListener) -> backupSms
    void restoreSms(android.content.Context,java.lang.String,com.rolfwang.mobilesafe.engine.SmsEngine$ProcessListener) -> a
    void removeSameSms(android.content.Context) -> a
com.rolfwang.mobilesafe.engine.SmsEngine$ProcessListener -> com.rolfwang.mobilesafe.c.d:
    void max(int) -> b
    void process(int) -> a
com.rolfwang.mobilesafe.engine.TaskProvider -> com.rolfwang.mobilesafe.c.e:
    java.util.List getRunningTaskInfos(android.content.Context) -> a
com.rolfwang.mobilesafe.procmanager.TaskManagerActivity -> com.rolfwang.mobilesafe.procmanager.TaskManagerActivity:
    android.widget.TextView tv_ramSize -> a
    android.widget.TextView tv_proc_count -> b
    android.widget.ListView lv_proc -> c
    android.widget.TextView tv_category -> d
    com.rolfwang.mobilesafe.procmanager.TaskManagerActivity$MyProcessAdapter adapter -> e
    java.util.List allTaskInfo -> f
    java.util.List userTaskInfo -> g
    java.util.List systemTaskInfo -> h
    android.app.ActivityManager activityManager -> i
    boolean isShowSysTask -> j
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void setListItemClickListener() -> a
    void setListScrollListener() -> b
    void fillData() -> c
    void getMemoryStatus() -> d
    void clear(android.view.View) -> clear
    void selectAll(android.view.View) -> selectAll
    void cancel(android.view.View) -> cancel
    void setting(android.view.View) -> setting
    boolean access$0(com.rolfwang.mobilesafe.procmanager.TaskManagerActivity) -> a
    java.util.List access$1(com.rolfwang.mobilesafe.procmanager.TaskManagerActivity) -> b
    java.util.List access$2(com.rolfwang.mobilesafe.procmanager.TaskManagerActivity) -> c
    android.widget.TextView access$3(com.rolfwang.mobilesafe.procmanager.TaskManagerActivity) -> d
    com.rolfwang.mobilesafe.procmanager.TaskManagerActivity$MyProcessAdapter access$4(com.rolfwang.mobilesafe.procmanager.TaskManagerActivity) -> e
    void access$5(com.rolfwang.mobilesafe.procmanager.TaskManagerActivity,com.rolfwang.mobilesafe.procmanager.TaskManagerActivity$MyProcessAdapter) -> a
    android.widget.ListView access$6(com.rolfwang.mobilesafe.procmanager.TaskManagerActivity) -> f
    void access$7(com.rolfwang.mobilesafe.procmanager.TaskManagerActivity,java.util.List) -> a
    java.util.List access$8(com.rolfwang.mobilesafe.procmanager.TaskManagerActivity) -> g
com.rolfwang.mobilesafe.procmanager.TaskManagerActivity$1 -> com.rolfwang.mobilesafe.procmanager.a:
    com.rolfwang.mobilesafe.procmanager.TaskManagerActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.rolfwang.mobilesafe.procmanager.TaskManagerActivity$2 -> com.rolfwang.mobilesafe.procmanager.b:
    com.rolfwang.mobilesafe.procmanager.TaskManagerActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.rolfwang.mobilesafe.procmanager.TaskManagerActivity$3 -> com.rolfwang.mobilesafe.procmanager.c:
    com.rolfwang.mobilesafe.procmanager.TaskManagerActivity this$0 -> a
    void onPostExecute(java.lang.Void) -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.rolfwang.mobilesafe.procmanager.TaskManagerActivity$MyProcessAdapter -> com.rolfwang.mobilesafe.procmanager.d:
    com.rolfwang.mobilesafe.procmanager.TaskManagerActivity this$0 -> a
    int getCount() -> getCount
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
com.rolfwang.mobilesafe.procmanager.TaskManagerActivity$ViewHolder -> com.rolfwang.mobilesafe.procmanager.e:
    android.widget.ImageView iv_icon -> a
    android.widget.TextView tv_name -> b
    android.widget.TextView tv_mem -> c
    android.widget.CheckBox cb_check -> d
    com.rolfwang.mobilesafe.procmanager.TaskManagerActivity this$0 -> e
com.rolfwang.mobilesafe.receiver.Admin -> com.rolfwang.mobilesafe.receiver.Admin:
com.rolfwang.mobilesafe.receiver.BootCompleteReceiver -> com.rolfwang.mobilesafe.receiver.BootCompleteReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.rolfwang.mobilesafe.receiver.MyAppWidgestProvider -> com.rolfwang.mobilesafe.receiver.MyAppWidgestProvider:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void onEnabled(android.content.Context) -> onEnabled
    void onDisabled(android.content.Context) -> onDisabled
    void onDeleted(android.content.Context,int[]) -> onDeleted
    void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[]) -> onUpdate
com.rolfwang.mobilesafe.receiver.SmsReceiver -> com.rolfwang.mobilesafe.receiver.SmsReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.rolfwang.mobilesafe.service.AddressService -> com.rolfwang.mobilesafe.service.AddressService:
    com.rolfwang.mobilesafe.service.AddressService$OutgoingCallReceiver receiver -> a
    com.rolfwang.mobilesafe.service.AddressService$MyPhoneStateListener listener -> b
    android.telephony.TelephonyManager tm -> c
    android.view.View view -> d
    android.view.WindowManager windowManager -> e
    android.content.SharedPreferences sp -> f
    android.view.WindowManager$LayoutParams params -> g
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    void showMyToast(java.lang.String) -> a
    void dragView() -> b
    void hideMyToast() -> a
    void access$0(com.rolfwang.mobilesafe.service.AddressService,java.lang.String) -> a
    android.view.WindowManager$LayoutParams access$1(com.rolfwang.mobilesafe.service.AddressService) -> a
    android.view.WindowManager access$2(com.rolfwang.mobilesafe.service.AddressService) -> b
    android.view.View access$3(com.rolfwang.mobilesafe.service.AddressService) -> c
com.rolfwang.mobilesafe.service.AddressService$1 -> com.rolfwang.mobilesafe.service.a:
    int startX -> b
    int startY -> c
    com.rolfwang.mobilesafe.service.AddressService this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.rolfwang.mobilesafe.service.AddressService$MyPhoneStateListener -> com.rolfwang.mobilesafe.service.b:
    com.rolfwang.mobilesafe.service.AddressService this$0 -> a
    void onCallStateChanged(int,java.lang.String) -> onCallStateChanged
com.rolfwang.mobilesafe.service.AddressService$OutgoingCallReceiver -> com.rolfwang.mobilesafe.service.c:
    com.rolfwang.mobilesafe.service.AddressService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.rolfwang.mobilesafe.service.BlackNumService -> com.rolfwang.mobilesafe.service.BlackNumService:
    com.rolfwang.mobilesafe.service.BlackNumService$SmsReceiver receiver -> a
    android.telephony.TelephonyManager tm -> b
    com.rolfwang.mobilesafe.service.BlackNumService$MyPhoneStateListener phoneStateListener -> c
    com.rolfwang.mobilesafe.db.dao.BlackNumDao dao -> d
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    com.rolfwang.mobilesafe.db.dao.BlackNumDao access$0(com.rolfwang.mobilesafe.service.BlackNumService) -> a
    android.telephony.TelephonyManager access$1(com.rolfwang.mobilesafe.service.BlackNumService) -> b
com.rolfwang.mobilesafe.service.BlackNumService$MyPhoneStateListener -> com.rolfwang.mobilesafe.service.d:
    com.rolfwang.mobilesafe.service.BlackNumService this$0 -> a
    void onCallStateChanged(int,java.lang.String) -> onCallStateChanged
    void deleteCallLog(java.lang.String) -> a
    void endCall() -> a
com.rolfwang.mobilesafe.service.BlackNumService$MyPhoneStateListener$1 -> com.rolfwang.mobilesafe.service.e:
    com.rolfwang.mobilesafe.service.BlackNumService$MyPhoneStateListener this$1 -> a
    android.content.ContentResolver val$resolver -> b
    android.net.Uri val$uri -> c
    java.lang.String val$incomingNumber -> d
    void onChange(boolean) -> onChange
com.rolfwang.mobilesafe.service.BlackNumService$SmsReceiver -> com.rolfwang.mobilesafe.service.f:
    com.rolfwang.mobilesafe.service.BlackNumService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.rolfwang.mobilesafe.service.GPSService -> com.rolfwang.mobilesafe.service.GPSService:
    android.location.LocationManager locationManager -> a
    android.content.SharedPreferences sp -> b
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    android.content.SharedPreferences access$0(com.rolfwang.mobilesafe.service.GPSService) -> a
com.rolfwang.mobilesafe.service.GPSService$MyLocationListener -> com.rolfwang.mobilesafe.service.g:
    com.rolfwang.mobilesafe.service.GPSService this$0 -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
com.rolfwang.mobilesafe.service.WatchDogAppLockService -> com.rolfwang.mobilesafe.service.WatchDogAppLockService:
    android.app.ActivityManager activityManager -> a
    java.util.List runningTasks -> b
    com.rolfwang.mobilesafe.db.dao.WatchDogDao watchDogDao -> c
    java.util.Map appLockedState -> d
    java.util.List tempUnlock -> e
    com.rolfwang.mobilesafe.service.WatchDogAppLockService$WatchDogReiceiver watchDogReiceiver -> f
    java.lang.String tempUnLockPackageName -> g
    boolean flag -> h
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void dogRun() -> a
    void onDestroy() -> onDestroy
    void access$0(com.rolfwang.mobilesafe.service.WatchDogAppLockService,java.lang.String) -> a
    java.util.List access$1(com.rolfwang.mobilesafe.service.WatchDogAppLockService) -> a
    java.lang.String access$2(com.rolfwang.mobilesafe.service.WatchDogAppLockService) -> b
    void access$3(com.rolfwang.mobilesafe.service.WatchDogAppLockService,boolean) -> a
    void access$4(com.rolfwang.mobilesafe.service.WatchDogAppLockService) -> c
    com.rolfwang.mobilesafe.db.dao.WatchDogDao access$5(com.rolfwang.mobilesafe.service.WatchDogAppLockService) -> d
    void access$6(com.rolfwang.mobilesafe.service.WatchDogAppLockService,java.util.Map) -> a
    boolean access$7(com.rolfwang.mobilesafe.service.WatchDogAppLockService) -> e
    android.app.ActivityManager access$8(com.rolfwang.mobilesafe.service.WatchDogAppLockService) -> f
    void access$9(com.rolfwang.mobilesafe.service.WatchDogAppLockService,java.util.List) -> a
    java.util.List access$10(com.rolfwang.mobilesafe.service.WatchDogAppLockService) -> g
    java.util.Map access$11(com.rolfwang.mobilesafe.service.WatchDogAppLockService) -> h
com.rolfwang.mobilesafe.service.WatchDogAppLockService$1 -> com.rolfwang.mobilesafe.service.h:
    com.rolfwang.mobilesafe.service.WatchDogAppLockService this$0 -> a
    void onChange(boolean) -> onChange
com.rolfwang.mobilesafe.service.WatchDogAppLockService$2 -> com.rolfwang.mobilesafe.service.i:
    com.rolfwang.mobilesafe.service.WatchDogAppLockService this$0 -> a
    android.content.Intent val$intent -> b
    void run() -> run
com.rolfwang.mobilesafe.service.WatchDogAppLockService$WatchDogReiceiver -> com.rolfwang.mobilesafe.service.j:
    com.rolfwang.mobilesafe.service.WatchDogAppLockService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.rolfwang.mobilesafe.service.WidgestService -> com.rolfwang.mobilesafe.service.WidgestService:
    android.appwidget.AppWidgetManager appWidgetManager -> a
    android.content.ComponentName componentName -> b
    android.widget.RemoteViews remoteView -> c
    com.rolfwang.mobilesafe.service.WidgestService$ClearReceiver clearReceiver -> d
    java.util.Timer timer -> e
    com.rolfwang.mobilesafe.service.WidgestService$ScreenOnOffReceiver screenOnOffReceiver -> f
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void setWidgetButtonClick() -> a
    void updateWidgetsText() -> b
    void onDestroy() -> onDestroy
    void access$0(com.rolfwang.mobilesafe.service.WidgestService) -> a
    java.util.Timer access$1(com.rolfwang.mobilesafe.service.WidgestService) -> b
    void access$2(com.rolfwang.mobilesafe.service.WidgestService,java.util.Timer) -> a
    android.widget.RemoteViews access$3(com.rolfwang.mobilesafe.service.WidgestService) -> c
    android.appwidget.AppWidgetManager access$4(com.rolfwang.mobilesafe.service.WidgestService) -> d
    android.content.ComponentName access$5(com.rolfwang.mobilesafe.service.WidgestService) -> e
com.rolfwang.mobilesafe.service.WidgestService$1 -> com.rolfwang.mobilesafe.service.k:
    com.rolfwang.mobilesafe.service.WidgestService this$0 -> a
    void run() -> run
com.rolfwang.mobilesafe.service.WidgestService$ClearReceiver -> com.rolfwang.mobilesafe.service.l:
    com.rolfwang.mobilesafe.service.WidgestService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.rolfwang.mobilesafe.service.WidgestService$ScreenOnOffReceiver -> com.rolfwang.mobilesafe.service.m:
    com.rolfwang.mobilesafe.service.WidgestService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.rolfwang.mobilesafe.softmanager.SoftManagerActivity -> com.rolfwang.mobilesafe.softmanager.SoftManagerActivity:
    android.widget.ListView lv_soft -> a
    android.widget.TextView tv_category -> b
    android.widget.TextView tv_romsize -> c
    android.widget.TextView tv_sdsize -> d
    android.widget.PopupWindow popupWindow -> e
    com.rolfwang.mobilesafe.domain.AppInfo appInfo -> f
    java.util.List allAppInfos -> g
    java.util.List userAppInfos -> h
    java.util.List systemAppInfos -> i
    java.util.Map appLockedState -> j
    com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$MyListViewAdapter adapter -> k
    com.rolfwang.mobilesafe.db.dao.WatchDogDao watchDogDao -> l
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void setItemLongClickeListener() -> a
    void fillMemoryInfo() -> b
    void setListScrollListener() -> c
    void setItemClickListener() -> d
    void fillData() -> e
    void onClick(android.view.View) -> onClick
    java.util.List access$0(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity) -> a
    java.util.List access$1(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity) -> b
    java.util.List access$2(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity) -> c
    java.util.Map access$3(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity) -> d
    void access$4(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity,com.rolfwang.mobilesafe.domain.AppInfo) -> a
    com.rolfwang.mobilesafe.domain.AppInfo access$5(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity) -> e
    com.rolfwang.mobilesafe.db.dao.WatchDogDao access$6(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity) -> f
    com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$MyListViewAdapter access$7(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity) -> g
    android.widget.TextView access$8(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity) -> h
    android.widget.PopupWindow access$9(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity) -> i
    void access$10(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity,android.widget.PopupWindow) -> a
    void access$11(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity,com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$MyListViewAdapter) -> a
    android.widget.ListView access$12(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity) -> j
    void access$13(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity,java.util.List) -> a
    void access$14(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity,java.util.List) -> b
    void access$15(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity,java.util.List) -> c
    void access$16(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity,java.util.Map) -> a
com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$1 -> com.rolfwang.mobilesafe.softmanager.a:
    com.rolfwang.mobilesafe.softmanager.SoftManagerActivity this$0 -> a
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$2 -> com.rolfwang.mobilesafe.softmanager.b:
    com.rolfwang.mobilesafe.softmanager.SoftManagerActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$3 -> com.rolfwang.mobilesafe.softmanager.c:
    com.rolfwang.mobilesafe.softmanager.SoftManagerActivity this$0 -> a
    android.widget.LinearLayout val$ll_uninstall -> b
    android.widget.LinearLayout val$ll_info -> c
    android.view.View val$popupView -> d
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$4 -> com.rolfwang.mobilesafe.softmanager.d:
    com.rolfwang.mobilesafe.softmanager.SoftManagerActivity this$0 -> a
    void onPostExecute(java.lang.Void) -> a
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$MyListViewAdapter -> com.rolfwang.mobilesafe.softmanager.e:
    com.rolfwang.mobilesafe.softmanager.SoftManagerActivity this$0 -> a
    int getCount() -> getCount
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$ViewHolder -> com.rolfwang.mobilesafe.softmanager.f:
    android.widget.ImageView iv_icon -> b
    android.widget.TextView tv_name -> c
    android.widget.TextView tv_position -> d
    android.widget.TextView tv_version -> e
    android.widget.ImageView iv_lock -> f
    com.rolfwang.mobilesafe.softmanager.SoftManagerActivity this$0 -> a
    void access$0(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$ViewHolder,android.widget.ImageView) -> a
    void access$1(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$ViewHolder,android.widget.TextView) -> a
    void access$2(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$ViewHolder,android.widget.TextView) -> b
    void access$3(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$ViewHolder,android.widget.TextView) -> c
    void access$4(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$ViewHolder,android.widget.ImageView) -> b
    android.widget.ImageView access$5(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$ViewHolder) -> a
    android.widget.TextView access$6(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$ViewHolder) -> b
    android.widget.TextView access$7(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$ViewHolder) -> c
    android.widget.TextView access$8(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$ViewHolder) -> d
    android.widget.ImageView access$9(com.rolfwang.mobilesafe.softmanager.SoftManagerActivity$ViewHolder) -> e
com.rolfwang.mobilesafe.softmanager.WatchDogUnlockActivity -> com.rolfwang.mobilesafe.softmanager.WatchDogUnlockActivity:
    android.widget.ImageView iv_icon -> a
    android.widget.TextView tv_name -> b
    android.widget.EditText et_password -> c
    android.content.pm.PackageManager packageManager -> d
    android.content.pm.ApplicationInfo applicationInfo -> e
    java.lang.String packageName -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onBackPressed() -> onBackPressed
    void onStop() -> onStop
    void unlock(android.view.View) -> unlock
    void cancel(android.view.View) -> cancel
com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity -> com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity:
    android.widget.ListView lv_blacknum -> a
    java.util.List blackNumInfos -> b
    com.rolfwang.mobilesafe.db.dao.BlackNumDao dao -> c
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$MyListAdapter adapter -> d
    android.widget.Button bt_addBlack -> e
    int pageSize -> f
    int startIndex -> g
    void onCreate(android.os.Bundle) -> onCreate
    void setScrollListener() -> a
    void addBlackNum() -> b
    void fillData() -> c
    java.util.List access$0(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity) -> a
    com.rolfwang.mobilesafe.db.dao.BlackNumDao access$1(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity) -> b
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$MyListAdapter access$2(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity) -> c
    android.widget.ListView access$3(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity) -> d
    int access$4(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity) -> e
    int access$5(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity) -> f
    void access$6(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity,int) -> a
    void access$7(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity) -> g
    void access$8(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity,com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$MyListAdapter) -> a
    void access$9(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity,com.rolfwang.mobilesafe.db.dao.BlackNumDao) -> a
    void access$10(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity,java.util.List) -> a
com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$1 -> com.rolfwang.mobilesafe.telesafe.a:
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$2 -> com.rolfwang.mobilesafe.telesafe.b:
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity this$0 -> a
    void onClick(android.view.View) -> onClick
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity access$0(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$2) -> a
com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$2$1 -> com.rolfwang.mobilesafe.telesafe.c:
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$2 this$1 -> a
    android.widget.EditText val$et_phoneNum -> b
    android.widget.RadioGroup val$rg_black_type -> c
    android.app.AlertDialog val$dialog -> d
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$2$2 -> com.rolfwang.mobilesafe.telesafe.d:
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$2 this$1 -> a
    android.app.AlertDialog val$dialog -> b
    void onClick(android.view.View) -> onClick
com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$3 -> com.rolfwang.mobilesafe.telesafe.e:
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity this$0 -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onPreExecute() -> onPreExecute
    java.lang.Void doInBackground(java.lang.Object[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$Holder -> com.rolfwang.mobilesafe.telesafe.f:
    android.widget.TextView tv_blacknum -> b
    android.widget.TextView tv_mode -> c
    android.widget.ImageView iv_remove -> d
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity this$0 -> a
    void access$0(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$Holder,android.widget.ImageView) -> a
    void access$1(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$Holder,android.widget.TextView) -> a
    void access$2(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$Holder,android.widget.TextView) -> b
    android.widget.TextView access$3(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$Holder) -> a
    android.widget.TextView access$4(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$Holder) -> b
    android.widget.ImageView access$5(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$Holder) -> c
com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$MyListAdapter -> com.rolfwang.mobilesafe.telesafe.g:
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity this$0 -> a
    int getCount() -> getCount
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity access$0(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$MyListAdapter) -> a
com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$MyListAdapter$1 -> com.rolfwang.mobilesafe.telesafe.h:
    java.lang.String blackNum -> a
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$MyListAdapter this$1 -> b
    com.rolfwang.mobilesafe.domain.BlackNumInfo val$blackNumInfo -> c
    void onClick(android.view.View) -> onClick
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$MyListAdapter access$0(com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$MyListAdapter$1) -> a
com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$MyListAdapter$1$1 -> com.rolfwang.mobilesafe.telesafe.i:
    com.rolfwang.mobilesafe.telesafe.CallSmsSafeActivity$MyListAdapter$1 this$2 -> a
    com.rolfwang.mobilesafe.domain.BlackNumInfo val$blackNumInfo -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.rolfwang.mobilesafe.trafficstate.TrafficStateActivity -> com.rolfwang.mobilesafe.trafficstate.TrafficStateActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.rolfwang.mobilesafe.ui.SettingEnterView -> com.rolfwang.mobilesafe.ui.SettingEnterView:
    android.view.View view -> a
    android.widget.TextView tv_title -> b
    android.widget.TextView tv_des -> c
    void init() -> a
    void setTitle(java.lang.String) -> setTitle
    void setDes(java.lang.String) -> setDes
com.rolfwang.mobilesafe.ui.SettingView -> com.rolfwang.mobilesafe.ui.SettingView:
    android.widget.TextView tv_title -> a
    android.widget.TextView tv_des -> b
    android.widget.CheckBox cb -> c
    java.lang.String titleValue -> d
    java.lang.String des_on -> e
    java.lang.String des_off -> f
    void init() -> b
    void setTitle(java.lang.String) -> setTitle
    void setDes(java.lang.String) -> setDes
    boolean isChecked() -> a
    void setChecked(boolean) -> setChecked
com.rolfwang.mobilesafe.utils.AppUtils -> com.rolfwang.mobilesafe.d.a:
    void uninstalApp(android.content.Context,java.lang.String) -> a
    void launchApp(android.content.Context,java.lang.String) -> b
    void shareApp(android.content.Context,java.lang.String) -> c
    void appInfo(android.content.Context,java.lang.String) -> d
com.rolfwang.mobilesafe.utils.DensityUtils -> com.rolfwang.mobilesafe.d.b:
    int dip2px(android.content.Context,float) -> a
com.rolfwang.mobilesafe.utils.FileUtils -> com.rolfwang.mobilesafe.d.c:
    void copyFile(java.io.InputStream,java.io.File) -> a
com.rolfwang.mobilesafe.utils.MemoryUtils -> com.rolfwang.mobilesafe.d.d:
    long getRAMAviSize(android.content.Context) -> a
    long getRAMTotalSize2(android.content.Context) -> b
    java.lang.String getSDTotalSize(android.content.Context) -> c
    java.lang.String getSDAvailableSize(android.content.Context) -> d
    java.lang.String getROMTotalSize(android.content.Context) -> e
    java.lang.String getROMAvailableSize(android.content.Context) -> f
com.rolfwang.mobilesafe.utils.ServiceUtils -> com.rolfwang.mobilesafe.d.e:
    boolean isServiceRunning(android.content.Context,java.lang.String) -> a
com.rolfwang.mobilesafe.utils.StreamUtils -> com.rolfwang.mobilesafe.d.f:
    java.lang.String parseInputStream(java.io.InputStream) -> a
com.rolfwang.mobilesafe.utils.StringUtils -> com.rolfwang.mobilesafe.d.g:
    java.lang.String md5Digest(java.lang.String) -> a
com.rolfwang.mobilesafe.utils.TaskUtils -> com.rolfwang.mobilesafe.d.h:
    int getRunningTaskCount(android.content.Context) -> a
